// Generated by CoffeeScript 2.3.1
(function() {
  var Definition, OriginalReferencer, Referencer, escope;

  escope = require('eslint-scope');

  ({Definition} = require('eslint-scope/lib/definition'));

  OriginalReferencer = require('eslint-scope/lib/referencer');

  // PatternVisitor = require 'eslint-scope/lib/pattern-visitor'
  Referencer = class Referencer extends OriginalReferencer {
    AssignmentExpression(node) {
      // @visit node.left if node.left.type is 'Identifier'
      this.visitPattern(node.left, (identifier) => {
        if (identifier.declaration) {
          return this._createScopeVariable(identifier);
        }
      });
      return super.AssignmentExpression(node);
    }

    For(node) {
      this.visitPattern(node.name, (identifier) => {
        if (identifier.declaration) {
          return this._createScopeVariable(identifier);
        }
      });
      this.visitPattern(node.index, (identifier) => {
        if (identifier.declaration) {
          return this._createScopeVariable(identifier);
        }
      });
      return this.visitChildren(node);
    }

    Identifier(node) {
      if (!node.declaration) {
        return super.Identifier(node);
      }
    }

    // Identifier: (node) ->
    //   dump {node}
    //   @_createScopeVariable node if node.declaration
    //   super node
    _createScopeVariable(node) {
      return this.currentScope().variableScope.__define(node, new Definition('Variable', node, node, null, null, null));
    }

  };

  module.exports = function(ast, parserOptions) {
    var options, referencer, scopeManager;
    options = {
      fallback: 'iteration',
      sourceType: ast.sourceType,
      ecmaVersion: parserOptions.ecmaVersion || 2018
    };
    scopeManager = new escope.ScopeManager(options);
    referencer = new Referencer(options, scopeManager);
    // dump {ast}
    referencer.visit(ast);
    return scopeManager;
  };

  // dump = (obj) ->
//   console.log require('util').inspect obj, no, null

}).call(this);
