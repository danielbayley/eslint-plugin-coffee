// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-this-before-super rule.
   * @author Toru Nagashima
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-this-before-super');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-this-before-super', rule, {
    valid: [
      /*
       * if the class has no extends or `extends null`, just ignore.
       * those classes cannot call `super()`.
       */
      'class A',
      'class A\n  constructor: ->',
      'class A\n  constructor: -> @b = 0',
      'class A\n  constructor: -> @b()',
      'class A extends null',
      'class A extends null\n  constructor: ->',
      // allows `this`/`super` after `super()`.
      'class A extends B',
      'class A extends B\n  constructor: -> super()',
      'class A extends B\n  constructor: ->\n    super()\n    @c = @d',
      'class A extends B\n  constructor: ->\n    super()\n    this.c()',
      'class A extends B\n  constructor: ->\n    super()\n    super.c()',
      'class A extends B\n  constructor: (@a) ->\n    super()',
      'class A extends B\n  constructor: ->\n    if yes\n      super()\n    else\n      super()\n    this.c()',
      // allows `this`/`super` in nested executable scopes, even if before `super()`.
      'class A extends B\n  constructor: ->\n    class B extends C\n      constructor: ->\n        super()\n        @d = 0\n    super()',
      'class A extends B\n  constructor: ->\n    B = class extends C\n      constructor: ->\n        super()\n        this.d = 0\n    super()',
      'class A extends B\n  constructor: ->\n    c = -> @d()\n    super()',
      'class A extends B\n  constructor: ->\n    c = => @d()\n    super()',
      // ignores out of constructors.
      'class A\n  b: ->\n    @c = 0',
      'class A extends B\n  c: -> @d = 0',
      'a = -> @b = 0',
      // multi code path.
      'class A extends B\n  constructor: ->\n    if a\n      super()\n      this.a()\n    else\n      super()\n      this.b()',
      'class A extends B\n  constructor: ->\n    if a\n      super()\n    else\n      super()\n    this.a()',
      'class A extends B\n  constructor: ->\n    try\n      super()\n    finally\n    this.a()',
      // https://github.com/eslint/eslint/issues/5261
      'class A extends B\n  constructor: (a) ->\n    super()\n    @a() for b from a',
      'class A extends B\n  constructor: (a) ->\n    foo b for b from a\n    super()',
      // https://github.com/eslint/eslint/issues/5319
      'class A extends B\n  constructor: (a) ->\n    super()\n    @a = a and (->) and @foo',
      // https://github.com/eslint/eslint/issues/5894
      'class A\n  constructor: ->\n    return\n    this',
      'class A extends B\n  constructor: ->\n    return\n    this',
      // https://github.com/eslint/eslint/issues/8848
      "class A extends B\n  constructor: (props) ->\n    super props\n\n    try\n      arr = []\n      for a from arr\n        ;\n    catch err"
    ],
    invalid: [
      {
        // disallows all `this`/`super` if `super()` is missing.
        code: 'class A extends B\n  constructor: -> @c = 0',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: (@c) ->',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: -> this.c()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: -> super.c()',
        errors: [
          {
            message: "'super' is not allowed before 'super()'.",
            type: 'Super'
          }
        ]
      },
      {
        // disallows `this`/`super` before `super()`.
        code: 'class A extends B\n  constructor: ->\n    @c = 0\n    super()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    @c()\n    super()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super.c()\n    super()',
        errors: [
          {
            message: "'super' is not allowed before 'super()'.",
            type: 'Super'
          }
        ]
      },
      {
        // disallows `this`/`super` in arguments of `super()`.
        code: 'class A extends B\n  constructor: -> super @c',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: -> super this.c()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: -> super super.c()',
        errors: [
          {
            message: "'super' is not allowed before 'super()'.",
            type: 'Super'
          }
        ]
      },
      {
        // even if is nested, reports correctly.
        code: 'class A extends B\n  constructor: ->\n    class C extends D\n      constructor: ->\n        super()\n        @e()\n    @f()\n    super()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression',
            line: 7
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    class C extends D\n      constructor: ->\n        this.e()\n        super()\n    super()\n    this.f()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression',
            line: 5
          }
        ]
      },
      {
        // multi code path.
        code: 'class A extends B\n  constructor: ->\n    if a then super() else @a()',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    try\n      super()\n    finally\n      this.a',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    try\n      super()\n    catch err\n    this.a',
        errors: [
          {
            message: "'this' is not allowed before 'super()'.",
            type: 'ThisExpression'
          }
        ]
      }
    ]
  });

}).call(this);
