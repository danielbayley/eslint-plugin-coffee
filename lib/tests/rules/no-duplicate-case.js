// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-duplicate-when rule.
   * @author Dieter Oberkofler
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-duplicate-case');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-duplicate-when', rule, {
    valid: ['a = 1\nswitch a\n  when 1\n    ;\n  when 2\n    ;\n  else\n    ;', "a = 1\nswitch a\n  when 1\n    ;\n  when '1'\n    ;\n  else\n    ;", 'a = 1\nswitch a\n  when 1\n    ;\n  when yes\n    ;\n  else\n    ;', 'a = 1\np = {p: {p1: 1, p2: 1}}\nswitch a\n  when p.p.p1\n    ;\n  when p.p.p2\n    ;\n  else\n    ;', 'a = 1\nf = (b) ->\n  if b then { p1: 1 } else { p1: 2 }\nswitch a\n  when f(true).p1\n    ;\n  when f(true, false).p1\n    ;\n  else\n    ;', 'a = 1\nf = (s) -> { p1: s }\nswitch a\n  when f(a + 1).p1\n    ;\n  when f(a + 2).p1\n    ;\n  else\n    ;', 'a = 1\nf = (s) -> p1: s\nswitch a\n  when f(if a == 1 then 2 else 3).p1\n    ;\n  when f(if a is 1 then 2 else 3).p1\n    ;\n  else\n    ;', 'a = 1\nf1 = -> p1: 1\nf2 = -> p1: 2\nswitch a\n  when f1().p1\n    ;\n  when f2().p1\n    ;\n  else\n    ;', 'a = [1,2]\nswitch a.toString()\n  when ([1,2]).toString()\n    ;\n  when ([1]).toString()\n    ;\n  else\n    ;'],
    invalid: [
      {
        code: 'a = 1\nswitch a\n  when 1\n    ;\n  when 1\n    ;\n  when 2\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\nswitch a\n  when 1, 1\n    ;\n  when 2\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\nswitch a\n  when 1\n    ;\n  when 2, 1\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: "a = '1'\nswitch a\n  when '1'\n    ;\n  when '1'\n    ;\n  when '2'\n    ;\n  else\n    ;",
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\none = 1\nswitch a\n  when one\n    ;\n  when one\n    ;\n  when 2\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\np = {p: {p1: 1, p2: 1}}\nswitch a\n  when p.p.p1\n    ;\n  when p.p.p1\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\nf = (b) ->\n  if b then { p1: 1 } else { p1: 2 }\nswitch a\n  when f(true).p1\n    ;\n  when f(true).p1\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\nf = (s) -> p1: s\nswitch a\n  when f(a + 1).p1\n    ;\n  when f(a + 1).p1\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\nf = (s) -> p1: s\nswitch a\n  when f(if a is 1 then 2 else 3).p1\n    ;\n  when f(if a is 1 then 2 else 3).p1\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = 1\nf1 = -> p1: 1\nswitch a\n  when f1().p1\n    ;\n  when f1().p1\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      },
      {
        code: 'a = [1, 2]\nswitch a.toString()\n  when ([1, 2]).toString()\n    ;\n  when ([1, 2]).toString()\n    ;\n  else\n    ;',
        errors: [
          {
            messageId: 'unexpected',
            type: 'SwitchCase'
          }
        ]
      }
    ]
  });

}).call(this);
