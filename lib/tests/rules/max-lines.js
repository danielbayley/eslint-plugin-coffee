// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview enforce a maximum file length
   * @author Alberto Rodr√≠guez
   */
  'use strict';
  /**
   * Returns the error message with the specified max number of lines
   * @param {number} limitLines Maximum number of lines
   * @param {number} actualLines Actual number of lines
   * @returns {string} error message
   */
  var RuleTester, errorMessage, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/max-lines');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  errorMessage = function(limitLines, actualLines) {
    return `File must be at most ${limitLines} lines long. It's ${actualLines} lines long.`;
  };

  ruleTester.run('max-lines', rule, {
    valid: [
      'x',
      'xy\nxy',
      {
        code: 'xy\nxy',
        options: [2]
      },
      {
        code: 'xy\nxy',
        options: [
          {
            max: 2
          }
        ]
      },
      {
        code: '#a single line comment\nxy\nxy\n### a multiline\n really really\n long comment###',
        options: [
          {
            max: 2,
            skipComments: true
          }
        ]
      },
      {
        code: 'x y, ### inline comment\n spanning multiple lines ### z',
        options: [
          {
            max: 2,
            skipComments: true
          }
        ]
      },
      {
        code: 'x ### inline comment\n spanning multiple lines ###\nz',
        options: [
          {
            max: 2,
            skipComments: true
          }
        ]
      },
      {
        code: 'x\n\n\t\n\t  \ny',
        options: [
          {
            max: 2,
            skipBlankLines: true
          }
        ]
      },
      {
        code: '#a single line comment\nxy\n \nxy\n \n ### a multiline\n really really\n long comment###',
        options: [
          {
            max: 2,
            skipComments: true,
            skipBlankLines: true
          }
        ]
      }
    ],
    invalid: [
      {
        code: 'xyz\nxyz\nxyz',
        options: [2],
        errors: [
          {
            message: errorMessage(2,
          3)
          }
        ]
      },
      {
        code: '### a multiline comment\n  that goes to many lines###\nxy\nxy',
        options: [2],
        errors: [
          {
            message: errorMessage(2,
          4)
          }
        ]
      },
      {
        code: '#a single line comment\nxy\nxy',
        options: [2],
        errors: [
          {
            message: errorMessage(2,
          3)
          }
        ]
      },
      {
        code: 'x\n\n\n\ny',
        options: [
          {
            max: 2
          }
        ],
        errors: [
          {
            message: errorMessage(2,
          5)
          }
        ]
      },
      {
        code: '#a single line comment\nxy\n \nxy\n \n### a multiline\n really really\n long comment###',
        options: [
          {
            max: 2,
            skipComments: true
          }
        ],
        errors: [
          {
            message: errorMessage(2,
          4)
          }
        ]
      },
      {
        code: 'x # inline comment\ny\nz',
        options: [
          {
            max: 2,
            skipComments: true
          }
        ],
        errors: [
          {
            message: errorMessage(2,
          3)
          }
        ]
      },
      {
        code: 'x ### inline comment\n spanning multiple lines ###\ny\nz',
        options: [
          {
            max: 2,
            skipComments: true
          }
        ],
        errors: [
          {
            message: errorMessage(2,
          3)
          }
        ]
      },
      {
        code: '#a single line comment\nxy\n \nxy\n \n ### a multiline\n really really\n long comment###',
        options: [
          {
            max: 2,
            skipBlankLines: true
          }
        ],
        errors: [
          {
            message: errorMessage(2,
          6)
          }
        ]
      }
    ]
  });

}).call(this);
