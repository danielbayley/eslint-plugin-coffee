// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for complexity rule.
   * @author Patrick Brosset
   */
  'use strict';
  /**
   * Create an expected error object
   * @param   {string} name       The name of the symbol being tested
   * @param   {number} complexity The cyclomatic complexity value of the symbol
   * @returns {Object}            The error object
   */
  var RuleTester, createComplexity, makeError, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/complexity');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  /**
   * Generates a code string with the amount of complexity specified in the parameter
   * @param {int} complexity The level of complexity
   * @returns {string} Code with the amount of complexity specified in the parameter
   * @private
   */
  createComplexity = function(complexity) {
    var funcString, i, j, ref;
    funcString = '(a) -> if a is 1 then ';
    for (i = j = 2, ref = complexity; (2 <= ref ? j < ref : j > ref); i = 2 <= ref ? ++j : --j) {
      funcString += `; else if a is ${i} then `;
    }
    funcString += ';';
    return funcString;
  };

  makeError = function(name, complexity) {
    return {
      messageId: 'complex',
      data: {name, complexity}
    };
  };

  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('complexity', rule, {
    valid: [
      'a = (x) ->',
      {
        code: 'b = (x) ->',
        options: [1]
      },
      {
        code: 'a = (x) -> return x if yes',
        options: [2]
      },
      {
        code: '(x) ->\n  if yes\n    x\n  else\n    x + 1',
        options: [2]
      },
      {
        code: 'a = (x) ->\n  if yes\n    x\n  else if no\n    x + 1\n  else\n    4',
        options: [3]
      },
      {
        code: '(x) ->\n  for [0...5]\n    x++\n  x',
        options: [2]
      },
      {
        code: '(obj) ->\n  for i of obj\n    obj[i] = 3',
        options: [2]
      },
      {
        code: '(x) ->\n  for i in [0...5]\n    if i % 2 is 0\n      x++\n  x',
        options: [3]
      },
      {
        code: '(obj) ->\n  if obj\n    for x of obj\n      try x.getThis()\n      catch e\n        x.getThat()\n  else\n    return false',
        options: [4]
      },
      {
        code: '(x) ->\n  try\n    x.getThis()\n  catch e\n    x.getThat()',
        options: [2]
      },
      {
        code: '(x) -> if x is 4 then 3 else 5',
        options: [2]
      },
      {
        code: '(x) -> if x is 4 then 3 else if x is 3 then 2 else 1',
        options: [3]
      },
      {
        code: '(x) -> x or 4',
        options: [2]
      },
      {
        code: '(x) -> x and 4',
        options: [2]
      },
      {
        code: '(x) ->\n  switch x\n    when 1\n      1\n    when 2\n      2\n    else\n      3',
        options: [3]
      },
      {
        code: "(x) ->\n  switch x\n    when 1\n      1\n    when 2\n      2\n    else\n      5 if x == 'foo'",
        options: [4]
      },
      {
        code: "(x) ->\n  loop\n    'foo'",
        options: [2]
      },
      {
        code: 'bar() if foo',
        options: [3]
      },
      {
        // object property options
        code: 'b = (x) ->',
        options: [
          {
            max: 1
          }
        ]
      }
    ],
    invalid: [
      {
        code: 'a = (x) ->',
        options: [0],
        errors: [makeError('Function',
      1)]
      },
      {
        code: 'func = ->',
        options: [0],
        errors: [makeError('Function',
      1)]
      },
      {
        code: 'obj = { a: (x) -> }',
        options: [0],
        errors: [makeError("Method 'a'",
      1)]
      },
      {
        code: 'class Test\n  a: (x) ->',
        options: [0],
        errors: [makeError("Method 'a'",
      1)]
      },
      {
        code: 'a = (x) => if yes then return x',
        options: [1],
        errors: 1
      },
      {
        code: '(x) ->\n  if yes\n    x\n  else\n    x + 1',
        options: [1],
        errors: 1
      },
      {
        code: '(x) ->\n  if yes\n    x\n  else if no\n    x + 1\n  else\n    4',
        options: [2],
        errors: 1
      },
      {
        code: '(x) ->\n  for [0...5]\n    x++\n  x',
        options: [1],
        errors: 1
      },
      {
        code: '(obj) ->\n  for i of obj\n    obj[i] = 3',
        options: [1],
        errors: 1
      },
      {
        code: '(x) ->\n  for i in [0...5]\n    if i % 2 is 0\n      x++\n  return x',
        options: [2],
        errors: 1
      },
      {
        code: '(obj) ->\n  if obj\n    for x of obj\n      try\n        x.getThis()\n      catch e\n        x.getThat()\n  else\n    false',
        options: [3],
        errors: 1
      },
      {
        code: '(x) ->\n  try\n    x.getThis()\n  catch e\n    x.getThat',
        options: [1],
        errors: 1
      },
      {
        code: '(x) -> if x is 4 then 3 else 5',
        options: [1],
        errors: 1
      },
      {
        code: '(x) -> if x is 4 then 3 else if x is 3 then 2 else 1',
        options: [2],
        errors: 1
      },
      {
        code: '(x) -> x or 4',
        options: [1],
        errors: 1
      },
      {
        code: '(x) -> x and 4',
        options: [1],
        errors: 1
      },
      {
        code: '(x) ->\n  switch x\n    when 1\n      1\n    when 2\n      2\n    else\n      3',
        options: [2],
        errors: 1
      },
      {
        code: "(x) ->\n  switch x\n    when 1\n      1\n    when 2\n      2\n    else\n      if x == 'foo' then 5",
        options: [3],
        errors: 1
      },
      {
        code: "(x) ->\n  loop\n    'foo'",
        options: [1],
        errors: 1
      },
      {
        code: "(x) ->\n  do ->\n    'foo' while yes\n  do ->\n    'bar' until no",
        options: [1],
        errors: 2
      },
      {
        code: "(x) ->\n  do ->\n    while true then 'foo'\n  (-> 'bar')()",
        options: [1],
        errors: 1
      },
      {
        code: 'obj =\n  a: (x) -> if x then 0 else 1',
        options: [1],
        errors: [makeError("Method 'a'",
      2)]
      },
      {
        code: 'obj = a: (x) -> if x then 0 else 1',
        options: [1],
        errors: [makeError("Method 'a'",
      2)]
      },
      {
        code: createComplexity(21),
        errors: [makeError('Function',
      21)]
      },
      {
        // object property options
        code: 'a = (x) ->',
        options: [
          {
            max: 0
          }
        ],
        errors: [makeError('Function',
      1)]
      }
    ]
  });

}).call(this);
