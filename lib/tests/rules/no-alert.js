// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-alert rule.
   * @author Nicholas C. Zakas
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-alert');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-alert', rule, {
    valid: ['a[o.k](1)', 'foo.alert(foo)', 'foo.confirm(foo)', 'foo.prompt(foo)', 'alert = ->\nalert()', '->\n  alert = bar\n  alert()', '(alert) -> alert()', 'alert = ->\n->\n  alert()', '->\n  alert = ->\n  ->\n    alert()', 'confirm = ->\nconfirm()', 'prompt = ->\nprompt()', 'window[alert]()', '-> @alert()', '->\n  window = bar\n  window.alert()'],
    invalid: [
      {
        code: 'alert(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'window.alert(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: "window['alert'](foo)",
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'confirm(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'confirm'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'window.confirm(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'confirm'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: "window['confirm'](foo)",
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'confirm'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'prompt(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'prompt'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'window.prompt(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'prompt'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: "window['prompt'](foo)",
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'prompt'
            },
            type: 'CallExpression',
            line: 1,
            column: 1
          }
        ]
      },
      {
        code: 'alert = ->\nwindow.alert(foo)',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 2,
            column: 1
          }
        ]
      },
      {
        code: '(alert) -> window.alert()',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 1,
            column: 12
          }
        ]
      },
      {
        code: '-> alert()',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 1,
            column: 4
          }
        ]
      },
      {
        code: '->\n  alert = ->\nalert()',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 3,
            column: 1
          }
        ]
      },
      {
        // TODO: uncomment if not always parsing as module
        // ,
        //   code: '@alert(foo)'
        //   errors: [
        //     messageId: 'unexpected'
        //     data: name: 'alert'
        //     type: 'CallExpression'
        //     line: 1
        //     column: 1
        //   ]
        // ,
        //   code: "this['alert'](foo)"
        //   errors: [
        //     messageId: 'unexpected'
        //     data: name: 'alert'
        //     type: 'CallExpression'
        //     line: 1
        //     column: 1
        //   ]
        code: '->\n  window = bar\n  window.alert()\nwindow.alert()',
        errors: [
          {
            messageId: 'unexpected',
            data: {
              name: 'alert'
            },
            type: 'CallExpression',
            line: 4,
            column: 1
          }
        ]
      }
    ]
  });

}).call(this);
