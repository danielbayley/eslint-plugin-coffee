// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for max-statements rule.
   * @author Ian Christian Myers
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/max-statements');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('max-statements', rule, {
    valid: [
      {
        code: '->\n  bar = 1\n  ->\n    noCount = 2\n  return 3',
        options: [3]
      },
      {
        code: '->\n  bar = 1\n  if yes\n    loop\n      qux = null\n  else\n    quxx()\n  return 3',
        options: [6]
      },
      {
        code: 'x = 5\n-> y = 6\nbar()\nz = 10\nbaz()',
        options: [5]
      },
      '->\n  a = null\n  b = null\n  c = null\n  x = null\n  y = null\n  z = null\n  bar()\n  baz()\n  qux()\n  quxx()',
      {
        code: 'do ->\n  bar = 1\n  return -> return 42',
        options: [
          1,
          {
            ignoreTopLevelFunctions: true
          }
        ]
      },
      {
        code: 'foo = ->\n  bar = 1\n  baz = 2',
        options: [
          1,
          {
            ignoreTopLevelFunctions: true
          }
        ]
      },
      {
        code: "define ['foo', 'qux'], (foo, qux) ->\n  bar = 1\n  baz = 2",
        options: [
          1,
          {
            ignoreTopLevelFunctions: true
          }
        ]
      },
      {
        // object property options
        code: 'foo =\n  thing: ->\n    bar = 1\n    baz = 2',
        options: [2]
      },
      {
        code: 'foo =\n  [\'thing\']: ->\n    bar = 1\n    baz = 2',
        options: [2]
      }
    ],
    invalid: [
      {
        code: 'foo = ->\n  bar = 1\n  baz = 2\n  qux = 3',
        options: [2],
        errors: [
          {
            message: 'Function has too many statements (3). Maximum allowed is 2.'
          }
        ]
      },
      {
        code: 'foo = ->\n  bar = 1\n  if yes\n    while no\n      qux = null\n  return 3',
        options: [4],
        errors: [
          {
            message: 'Function has too many statements (5). Maximum allowed is 4.'
          }
        ]
      },
      {
        code: 'foo = ->\n  bar = 1\n  if yes\n    loop\n      qux = null\n  return 3',
        options: [4],
        errors: [
          {
            message: 'Function has too many statements (5). Maximum allowed is 4.'
          }
        ]
      },
      {
        code: 'foo = ->\n  bar = 1\n  if yes\n    loop\n      qux = null\n  else\n    quxx()\n  return 3',
        options: [5],
        errors: [
          {
            message: 'Function has too many statements (6). Maximum allowed is 5.'
          }
        ]
      },
      {
        code: 'foo = ->\n  x = 5\n  bar = ->\n    y = 6\n  bar()\n  z = 10\n  baz()',
        options: [3],
        errors: [
          {
            message: 'Function has too many statements (5). Maximum allowed is 3.'
          }
        ]
      },
      {
        code: 'foo = ->\n  x = 5\n  bar = -> y = 6\n  bar()\n  z = 10\n  baz()',
        options: [4],
        errors: [
          {
            message: 'Function has too many statements (5). Maximum allowed is 4.'
          }
        ]
      },
      {
        code: 'do ->\n  bar = 1\n  ->\n    z = null\n    return 42',
        options: [
          1,
          {
            ignoreTopLevelFunctions: true
          }
        ],
        errors: [
          {
            message: 'Function has too many statements (2). Maximum allowed is 1.'
          }
        ]
      },
      {
        code: 'do ->\n  bar = 1\n  baz = 2\ndo ->\n  bar = 1\n  baz = 2',
        options: [
          1,
          {
            ignoreTopLevelFunctions: true
          }
        ],
        errors: [
          {
            message: 'Function has too many statements (2). Maximum allowed is 1.'
          },
          {
            message: 'Function has too many statements (2). Maximum allowed is 1.'
          }
        ]
      },
      {
        code: "define ['foo', 'qux'], (foo, qux) ->\n  bar = 1\n  baz = 2\n  ->\n    z = null\n    return 42",
        options: [
          1,
          {
            ignoreTopLevelFunctions: true
          }
        ],
        errors: [
          {
            message: 'Function has too many statements (2). Maximum allowed is 1.'
          }
        ]
      },
      {
        code: '->\n  a = null\n  b = null\n  c = null\n  x = null\n  y = null\n  z = null\n  bar()\n  baz()\n  qux()\n  quxx()\n  foo()',
        errors: [
          {
            message: 'Function has too many statements (11). Maximum allowed is 10.'
          }
        ]
      },
      {
        // object property options
        code: 'foo = {\n  thing: ->\n    bar = 1\n    baz = 2\n    baz2\n}',
        options: [2],
        errors: [
          {
            message: "Method 'thing' has too many statements (3). Maximum allowed is 2."
          }
        ]
      }
    ]
  });

  /*
 * TODO decide if we want this or not
 * {
 *     code: "var foo = { ['thing']() { var bar = 1; var baz = 2; var baz2; } }",
 *     options: [2],
 *     parserOptions: { ecmaVersion: 6 },
 *     errors: [{ message: "Method ''thing'' has too many statements (3). Maximum allowed is 2." }]
 * },
 */

}).call(this);
