// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-dupe-class-members rule.
   * @author Toru Nagashima
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-dupe-class-members');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-dupe-class-members', rule, {
    valid: ['class A\n  foo: ->\n  bar: ->', 'class A\n  @foo: ->\n  foo: ->', 'class A\n  foo: ->\nclass B\n  foo: ->', 'class A\n  [foo]: ->\n  foo: ->', "class A\n  'foo': ->\n  'bar': ->\n  baz: ->", 'class A\n  1: ->\n  2: ->'],
    invalid: [
      {
        code: 'class A\n  foo: ->\n  foo: ->',
        errors: [
          {
            type: 'MethodDefinition',
            line: 3,
            column: 3,
            messageId: 'unexpected',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: '!class A\n  foo: ->\n  foo: ->',
        errors: [
          {
            type: 'MethodDefinition',
            line: 3,
            column: 3,
            messageId: 'unexpected',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: "class A\n  'foo': ->\n  'foo': ->",
        errors: [
          {
            type: 'MethodDefinition',
            line: 3,
            column: 3,
            messageId: 'unexpected',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  10: ->\n  1e1: ->',
        errors: [
          {
            type: 'MethodDefinition',
            line: 3,
            column: 3,
            messageId: 'unexpected',
            data: {
              name: '10'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: ->\n  foo: ->\n  foo: ->',
        errors: [
          {
            type: 'MethodDefinition',
            line: 3,
            column: 3,
            messageId: 'unexpected',
            data: {
              name: 'foo'
            }
          },
          {
            type: 'MethodDefinition',
            line: 4,
            column: 3,
            messageId: 'unexpected',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  @foo: ->\n  @foo: ->',
        errors: [
          {
            type: 'MethodDefinition',
            line: 3,
            column: 4,
            messageId: 'unexpected',
            data: {
              name: 'foo'
            }
          }
        ]
      }
    ]
  });

}).call(this);
