// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for max-depth.
   * @author Ian Christian Myers
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/max-depth');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('max-depth', rule, {
    valid: [
      {
        code: 'foo = ->\n  if true\n    if false\n      if true\n        ;',
        options: [3]
      },
      {
        code: '->\n  if yes\n    ;\n  else if no\n    ;\n  else if yes\n    ;\n  else if no\n    ;',
        options: [3]
      },
      {
        // object property options
        code: 'foo = ->\n  if true\n    if false\n      if true\n        ;',
        options: [
          {
            max: 3
          }
        ]
      }
    ],
    invalid: [
      {
        code: 'foo = ->\n  if true\n    if false\n      if true\n        ;',
        options: [2],
        errors: [
          {
            message: 'Blocks are nested too deeply (3).',
            type: 'IfStatement'
          }
        ]
      },
      {
        code: '->\n  if yes\n    ;\n  else\n    loop\n      ;',
        options: [1],
        errors: [
          {
            message: 'Blocks are nested too deeply (2).',
            type: 'WhileStatement'
          }
        ]
      },
      {
        code: '->\n  loop\n    if true\n      ;',
        options: [1],
        errors: [
          {
            message: 'Blocks are nested too deeply (2).',
            type: 'IfStatement'
          }
        ]
      },
      {
        code: 'foo = ->\n  for x from foo\n    if true\n      ;',
        options: [1],
        errors: [
          {
            message: 'Blocks are nested too deeply (2).',
            type: 'IfStatement'
          }
        ]
      },
      {
        code: '->\n  while yes\n    if yes\n      if no\n        ;',
        options: [1],
        errors: [
          {
            message: 'Blocks are nested too deeply (2).',
            type: 'IfStatement'
          },
          {
            message: 'Blocks are nested too deeply (3).',
            type: 'IfStatement'
          }
        ]
      },
      {
        code: '->\n  if true\n    if false\n      if true\n        if false\n          if true\n            ;',
        errors: [
          {
            message: 'Blocks are nested too deeply (5).',
            type: 'IfStatement'
          }
        ]
      },
      {
        // object property options
        code: '->\n  if yes\n    if no\n      if yes\n        ;',
        options: [
          {
            max: 2
          }
        ],
        errors: [
          {
            message: 'Blocks are nested too deeply (3).',
            type: 'IfStatement'
          }
        ]
      }
    ]
  });

}).call(this);
