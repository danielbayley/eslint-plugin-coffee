// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-unused-vars rule.
   * @author Ilya Volodin
   */
  'use strict';
  /**
   * Returns an expected error for assigned-but-not-used variables.
   * @param {string} varName The name of the variable
   * @param {string} [type] The node type (defaults to "Identifier")
   * @returns {Object} An expected error object
   */
  /**
   * Returns an expected error for defined-but-not-used variables.
   * @param {string} varName The name of the variable
   * @param {string} [type] The node type (defaults to "Identifier")
   * @returns {Object} An expected error object
   */
  var RuleTester, assignedError, definedError, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-unused-vars');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.defineRule('use-every-a', function(context) {
    /**
     * Mark a variable as used
     * @returns {void}
     * @private
     */
    var useA;
    useA = function() {
      return context.markVariableAsUsed('a');
    };
    return {
      AssignmentExpression: useA,
      FunctionExpression: useA,
      ReturnStatement: useA
    };
  });

  definedError = function(varName, type) {
    return {
      message: `'${varName}' is defined but never used.`,
      type: type || 'Identifier'
    };
  };

  assignedError = function(varName, type) {
    return {
      message: `'${varName}' is assigned a value but never used.`,
      type: type || 'Identifier'
    };
  };

  ruleTester.run('no-unused-vars', rule, {
    valid: [
      'foo = 5\nloop\n  console.log foo\n  break',
      'for prop of box\n  box[prop] = parseInt box[prop]',
      'box = {a: 2}\nfor prop of box\n  box[prop] = parseInt(box[prop])',
      {
        code: 'a = 10\nalert a',
        options: ['all']
      },
      {
        code: 'a = 10\n(-> alert(a))()',
        options: ['all']
      },
      {
        code: 'a = 10\ndo -> alert a',
        options: ['all']
      },
      {
        code: 'a = 10\ndo ->\n  setTimeout(\n    -> alert a\n    0\n  )',
        options: ['all']
      },
      {
        code: 'a = 10\nd[a] = 0',
        options: ['all']
      },
      {
        code: 'do ->\n  a = 10\n  return a',
        options: ['all']
      },
      {
        code: 'do ->\n  a = 10\n  a',
        options: ['all']
      },
      {
        code: 'f = (a) -> alert(a)\nf()',
        options: ['all']
      },
      {
        code: 'c = 0\nf = (a) ->\n  b = a\n  b\nf c',
        options: ['all']
      },
      {
        code: 'a = (x, y) -> y\na()',
        options: ['all']
      },
      {
        code: 'arr1 = [1, 2]\narr2 = [3, 4]\nfor i in arr1\n  arr1[i] = 5\nfor i in arr2\n  arr2[i] = 10',
        options: ['all']
      },
      {
        // ,
        //   code: 'a = 10', options: ['local']
        code: 'min = "min"\nMath[min]',
        options: ['all']
      },
      {
        code: 'Foo.bar = (baz) -> baz',
        options: ['all']
      },
      'myFunc (->).bind @',
      'myFunc (->).toString()',
      'foo = (first, second) ->\n  doStuff ->\n    console.log second\nfoo()',
      'do ->\n  doSomething = ->\n  doSomething()',
      'try\ncatch e',
      '###global a ### a',
      {
        code: 'a = 10\ndo -> alert a',
        options: [
          {
            vars: 'all'
          }
        ]
      },
      {
        code: 'g = (bar, baz) -> baz\ng()',
        options: [
          {
            vars: 'all'
          }
        ]
      },
      {
        code: 'g = (bar, baz) -> baz\ng()',
        options: [
          {
            vars: 'all',
            args: 'after-used'
          }
        ]
      },
      {
        code: 'g = (bar, baz) -> bar\ng()',
        options: [
          {
            vars: 'all',
            args: 'none'
          }
        ]
      },
      {
        code: 'g = (bar, baz) -> 2\ng()',
        options: [
          {
            vars: 'all',
            args: 'none'
          }
        ]
      },
      {
        code: 'g = (bar, baz) -> bar + baz\ng()',
        options: [
          {
            vars: 'local',
            args: 'all'
          }
        ]
      },
      {
        code: 'g = (bar, baz) -> 2\ng()',
        options: [
          {
            vars: 'all',
            args: 'none'
          }
        ]
      },
      'do (z = -> z())',
      {
        code: ' ',
        globals: {
          a: true
        }
      },
      'who = "Paul"\nmodule.exports = "Hello #{who}!"',
      'export foo = 123',
      'export foo = ->',
      'toUpper = (partial) => partial.toUpperCase\nexport {toUpper}',
      'export class foo',
      'class Foo\nx = new Foo()\nx.foo()',
      'foo = "hello!"\nbar = (foobar = foo) ->\n  foobar.replace /!$/, " world!"\nbar();',
      'Foo = ->\nx = new Foo\nx.foo()',
      'foo = ->\n  foo = 1\n  foo\ndo foo',
      'foo = (foo) -> foo\nfoo 1',
      'foo = ->\n  foo = -> 1\n  foo()\nfoo()',
      'foo = ->\n  foo = 1\n  foo\nfoo()',
      'foo = (foo) -> foo\nfoo(1)',
      'x = 1\n[y = x] = []\nfoo y',
      'x = 1\n{y = x} = {}\nfoo(y)',
      'x = 1\n{z: [y = x]} = {}\nfoo(y)',
      'x = []\n{z: [y] = x} = {}\nfoo(y)',
      'x = 1\ny = null\n[y = x] = []\nfoo y',
      'x = 1\ny = null\n{z: [y = x]} = {}\nfoo y',
      'x = []\ny = null\n{z: [y] = x} = {}\nfoo y',
      'x = 1\nfoo = (y = x) -> bar y\nfoo()',
      'x = 1\nfoo = ({y = x} = {}) -> bar(y)\nfoo()',
      'x = 1\nfoo = (y = (z = x) -> bar(z)) -> y()\nfoo()',
      'x = 1\nfoo = (y = -> bar x) -> y()\nfoo()',
      'x = 1\n[y = x] = []\nfoo y',
      'x = 1\n{y = x} = {}\nfoo(y)',
      'x = 1\n{z: [y = x]} = {}\nfoo(y)',
      'x = []\n{z: [y] = x} = {}\nfoo(y)',
      'x = 1\ny = null\n[y = x] = []\nfoo(y)',
      'x = 1\ny = null\n{z: [y = x]} = {}\nfoo(y)',
      'x = []\ny = null\n{z: [y] = x} = {}\nfoo(y)',
      'x = 1\nfoo = (y = x) -> bar(y)\nfoo()',
      'x = 1\nfoo = ({y = x} = {}) -> bar(y)\nfoo()',
      'x = 1\nfoo = (y = (z = x) -> bar(z)) -> y()\nfoo()',
      'x = 1\nfoo = (y = -> bar(x)) -> y()\nfoo()',
      // exported variables should work
      // TODO: guessing these don't work because of "environment" (sourceType: 'module'?)
      // "###exported toaster### toaster = 'great'"
      // '''
      //   ###exported toaster, poster###
      //   toaster = 1
      //   poster = 0
      // '''
      // '###exported x### { x } = y'
      // '###exported x, y###  { x, y } = z'
      // Can mark variables as used via context.markVariableAsUsed()
      '###eslint use-every-a:1### a',
      '###eslint use-every-a:1### !(a) -> 1',
      '###eslint use-every-a:1###\n!->\n  a = null\n  1',
      {
        // ignore pattern
        code: '_a = null',
        options: [
          {
            vars: 'all',
            varsIgnorePattern: '^_'
          }
        ]
      },
      {
        // ,
        //   code: '''
        //     a = null
        //     foo = -> _b = null
        //     foo()
        //   '''
        //   options: [vars: 'local', varsIgnorePattern: '^_']
        code: 'foo = (_a) ->\nfoo()',
        options: [
          {
            args: 'all',
            argsIgnorePattern: '^_'
          }
        ]
      },
      {
        code: 'foo = (a, _b) -> a\nfoo()',
        options: [
          {
            args: 'after-used',
            argsIgnorePattern: '^_'
          }
        ]
      },
      {
        code: '[ firstItemIgnored, secondItem ] = items\nconsole.log secondItem',
        options: [
          {
            vars: 'all',
            varsIgnorePattern: '[iI]gnored'
          }
        ]
      },
      // for-in loops (see #2342)
      'do (obj = {}) ->\n  name = null\n  for name of obj\n    return',
      'do (obj = {}) ->\n  name = null\n  return yes for name of obj',
      {
        // caughtErrors
        code: 'try\ncatch err\n  console.error err',
        options: [
          {
            caughtErrors: 'all'
          }
        ]
      },
      {
        code: 'try\ncatch err',
        options: [
          {
            caughtErrors: 'none'
          }
        ]
      },
      {
        code: 'try\ncatch ignoreErr',
        options: [
          {
            caughtErrors: 'all',
            caughtErrorsIgnorePattern: '^ignore'
          }
        ]
      },
      {
        // caughtErrors with other combinations
        code: 'try\ncatch err',
        options: [
          {
            vars: 'all',
            args: 'all'
          }
        ]
      },
      {
        // Using object rest for variable omission
        code: "data = type: 'coords', x: 1, y: 2\n{ type, ...coords } = data\nconsole.log coords",
        options: [
          {
            ignoreRestSiblings: true
          }
        ]
      },
      // https://github.com/eslint/eslint/issues/6348
      'a = 0\nb = a = a + 1\nfoo(b)',
      'a = 0\nb = null\nb = a += a + 1\nfoo b',
      'a = 0\nb = a++\nfoo(b)',
      'foo = (a) ->\n  b = a = a + 1\n  bar(b)\nfoo()',
      'foo = (a) ->\n  b = a += a + 1\n  bar(b)\nfoo()',
      'foo = (a) ->\n  b = a++\n  bar(b)\nfoo()',
      // https://github.com/eslint/eslint/issues/6576
      'unregisterFooWatcher\n# ...\nunregisterFooWatcher = $scope.$watch "foo", ->\n  # ...some code..\n  unregisterFooWatcher()',
      'ref = setInterval(\n  -> clearInterval ref\n  10\n)',
      '_timer = null\nf = ->\n  _timer = setTimeout(\n    ->\n    if _timer then 100 else 0\n  )\nf()',
      'foo = (cb) ->\n  cb = do ->\n    something = (a) -> cb(1 + a)\n    register(something)\nfoo',
      'foo = (cb) ->\n  cb = yield (a) -> cb(1 + a)\nfoo',
      'foo = (cb) ->\n  cb = tag"hello#{(a) -> cb(1 + a)}"\nfoo()',
      'foo = (cb) ->\n  cb = b = (a) -> cb(1 + a)\n  b()\nfoo()',
      // https://github.com/eslint/eslint/issues/6646
      'someFunction = ->\n  a = 0\n  for [0...2]\n    a = myFunction(a)\nsomeFunction()',
      'a = null\nfoo = ->\n  a ?= 10\nfoo()',
      {
        // https://github.com/eslint/eslint/issues/7124
        code: '(a, b, {c, d}) -> d',
        options: [
          {
            argsIgnorePattern: 'c'
          }
        ]
      },
      {
        code: '(a, b, {c, d}) -> c',
        options: [
          {
            argsIgnorePattern: 'd'
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/7250
        code: '(a, b, c) -> c',
        options: [
          {
            argsIgnorePattern: 'c'
          }
        ]
      },
      {
        code: '(a, b, {c, d}) -> c',
        options: [
          {
            argsIgnorePattern: '[cd]'
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/8119
        code: '({a, ...rest}) => rest',
        options: [
          {
            args: 'all',
            ignoreRestSiblings: true
          }
        ]
      }
    ],
    invalid: [
      {
        code: 'foox = -> foox()',
        errors: [assignedError('foox')]
      },
      {
        code: 'do ->\n  foox = ->\n    return foox() if yes',
        errors: [assignedError('foox')]
      },
      {
        code: 'a = 10',
        errors: [assignedError('a')]
      },
      {
        code: 'f = ->\n  a = 1\n  -> f(a *= 2)',
        errors: [assignedError('f')]
      },
      {
        code: 'f = ->\n  a = 1\n  return -> f ++a',
        errors: [assignedError('f')]
      },
      {
        code: '###global a ###',
        errors: [definedError('a',
      'Program')]
      },
      {
        code: 'foo = (first, second) ->\n  doStuff ->\n    console.log second',
        errors: [assignedError('foo')]
      },
      {
        code: 'a = 10',
        options: ['all'],
        errors: [assignedError('a')]
      },
      {
        code: 'a = 10\na = 20',
        options: ['all'],
        errors: [assignedError('a')]
      },
      {
        code: 'a = 10\nb = 0\nc = null\nalert a + b',
        options: ['all'],
        errors: [assignedError('c')]
      },
      {
        code: 'f = ->\n  a = []\n  a.map ->',
        options: ['all'],
        errors: [assignedError('f')]
      },
      {
        code: 'f = ->\n  x = null\n  a = -> x = 42\n  b = -> alert x',
        options: ['all'],
        errors: 3
      },
      {
        code: 'f = (a) ->\nf()',
        options: ['all'],
        errors: [definedError('a')]
      },
      {
        code: 'a = (x, y, z) ->\n  y\na()',
        options: ['all'],
        errors: [definedError('z')]
      },
      {
        code: 'min = Math.min',
        options: ['all'],
        errors: [assignedError('min')]
      },
      {
        code: 'min = {min: 1}',
        options: ['all'],
        errors: [assignedError('min')]
      },
      {
        code: 'Foo.bar = (baz) -> 1',
        options: ['all'],
        errors: [definedError('baz')]
      },
      {
        code: 'gg = (baz, bar) -> baz\ngg()',
        options: [
          {
            vars: 'all'
          }
        ],
        errors: [definedError('bar')]
      },
      {
        code: 'do (foo, baz, bar) -> baz',
        options: [
          {
            vars: 'all',
            args: 'after-used'
          }
        ],
        errors: [definedError('bar')]
      },
      {
        code: 'do (foo, baz, bar) -> baz',
        options: [
          {
            vars: 'all',
            args: 'all'
          }
        ],
        errors: [definedError('foo'),
      definedError('bar')]
      },
      {
        code: 'do (foo) -> bar = 33',
        options: [
          {
            vars: 'all',
            args: 'all'
          }
        ],
        errors: [definedError('foo'),
      assignedError('bar')]
      },
      {
        code: 'do z = (foo) -> z()',
        options: [{}],
        errors: [definedError('foo')]
      },
      {
        code: '(z = (foo) -> z())()',
        options: [{}],
        errors: [definedError('foo')]
      },
      {
        code: 'f = ->\n  a = 1\n  -> f(a = 2)',
        options: [{}],
        errors: [
          assignedError('f'),
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'import x from "y"',
        parserOptions: {
          sourceType: 'module'
        },
        errors: [definedError('x')]
      },
      {
        code: 'export fn2 = ({ x, y }) -> console.log x',
        errors: [definedError('y')]
      },
      {
        code: 'export fn2 = (x, y) -> console.log(x)',
        errors: [definedError('y')]
      },
      {
        // ,
        //   # exported
        //   code: '''
        //     ###exported max###
        //     max = 1
        //     min = {min: 1}
        //   '''
        //   errors: [assignedError 'min']
        // ,
        //   code: '###exported x### { x, y } = z'
        //   errors: [assignedError 'y']
        // ignore pattern
        code: '_a = b = null',
        options: [
          {
            vars: 'all',
            varsIgnorePattern: '^_'
          }
        ],
        errors: [
          {
            message: "'b' is assigned a value but never used. Allowed unused vars must match /^_/.",
            line: 1,
            column: 6
          }
        ]
      },
      {
        code: 'a = null\nfoo = ->\n  _b = null\n  c_ = null\nfoo()',
        options: [
          {
            vars: 'local',
            varsIgnorePattern: '^_'
          }
        ],
        errors: [
          {
            message: "'a' is assigned a value but never used. Allowed unused vars must match /^_/."
          },
          {
            message: "'c_' is assigned a value but never used. Allowed unused vars must match /^_/.",
            line: 4,
            column: 3
          }
        ]
      },
      {
        code: 'foo = (a, _b) ->\nfoo()',
        options: [
          {
            args: 'all',
            argsIgnorePattern: '^_'
          }
        ],
        errors: [
          {
            message: "'a' is defined but never used. Allowed unused args must match /^_/.",
            line: 1,
            column: 8
          }
        ]
      },
      {
        code: 'foo = (a, _b, c) -> a\nfoo()',
        options: [
          {
            args: 'after-used',
            argsIgnorePattern: '^_'
          }
        ],
        errors: [
          {
            message: "'c' is defined but never used. Allowed unused args must match /^_/.",
            line: 1,
            column: 15
          }
        ]
      },
      {
        code: 'foo = (_a) ->\nfoo()',
        options: [
          {
            args: 'all',
            argsIgnorePattern: '[iI]gnored'
          }
        ],
        errors: [
          {
            message: "'_a' is defined but never used. Allowed unused args must match /[iI]gnored/.",
            line: 1,
            column: 8
          }
        ]
      },
      {
        code: '[ firstItemIgnored, secondItem ] = items',
        options: [
          {
            vars: 'all',
            varsIgnorePattern: '[iI]gnored'
          }
        ],
        errors: [
          {
            message: "'secondItem' is assigned a value but never used. Allowed unused vars must match /[iI]gnored/.",
            line: 1,
            column: 21
          }
        ]
      },
      {
        // for-in loops (see #2342)
        code: 'do (obj = {}) ->\n  for name in obj\n    i()\n    return',
        errors: [
          {
            message: "'name' is assigned a value but never used.",
            line: 2,
            column: 7
          }
        ]
      },
      {
        code: 'do (obj = {}) ->\n  for name in obj\n    ;',
        errors: [
          {
            message: "'name' is assigned a value but never used.",
            line: 2,
            column: 7
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/3617
        code: '### global foobar, foo, bar ###\nfoobar',
        errors: [
          {
            line: 1,
            column: 19,
            message: "'foo' is defined but never used."
          },
          {
            line: 1,
            column: 24,
            message: "'bar' is defined but never used."
          }
        ]
      },
      {
        code: '### global foobar,\n  foo,\n  bar\n ###\nfoobar',
        errors: [
          {
            line: 2,
            column: 2,
            message: "'foo' is defined but never used."
          },
          {
            line: 3,
            column: 2,
            message: "'bar' is defined but never used."
          }
        ]
      },
      {
        // Rest property sibling without ignoreRestSiblings
        code: "data = { type: 'coords', x: 1, y: 2 }\n{ type, ...coords } = data\nconsole.log(coords)",
        errors: [
          {
            line: 2,
            column: 3,
            message: "'type' is assigned a value but never used."
          }
        ]
      },
      {
        // Unused rest property with ignoreRestSiblings
        code: "data = { type: 'coords', x: 1, y: 2 }\n{ type, ...coords } = data\nconsole.log(type)",
        options: [
          {
            ignoreRestSiblings: true
          }
        ],
        errors: [
          {
            line: 2,
            column: 12,
            message: "'coords' is assigned a value but never used."
          }
        ]
      },
      {
        // Nested array destructuring with rest property
        code: "data = { vars: ['x','y'], x: 1, y: 2 }\n{ vars: [x], ...coords } = data\nconsole.log(coords)",
        errors: [
          {
            line: 2,
            column: 10,
            message: "'x' is assigned a value but never used."
          }
        ]
      },
      {
        // Nested object destructuring with rest property
        code: 'data = defaults: { x: 0 }, x: 1, y: 2\n{ defaults: { x }, ...coords } = data\nconsole.log(coords)',
        errors: [
          {
            line: 2,
            column: 15,
            message: "'x' is assigned a value but never used."
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/8119
        code: '({a, ...rest}) => {}',
        options: [
          {
            args: 'all',
            ignoreRestSiblings: true
          }
        ],
        errors: ["'rest' is defined but never used."]
      },
      {
        // https://github.com/eslint/eslint/issues/3714
        code: '### global a$fooz,$foo ###\na$fooz',
        errors: [
          {
            line: 1,
            column: 18,
            message: "'$foo' is defined but never used."
          }
        ]
      },
      {
        code: '### globals a$fooz, $ ###\na$fooz',
        errors: [
          {
            line: 1,
            column: 20,
            message: "'$' is defined but never used."
          }
        ]
      },
      {
        code: '###globals $foo###',
        errors: [
          {
            line: 1,
            column: 11,
            message: "'$foo' is defined but never used."
          }
        ]
      },
      {
        code: '### global global###',
        errors: [
          {
            line: 1,
            column: 11,
            message: "'global' is defined but never used."
          }
        ]
      },
      {
        code: '###global foo:true###',
        errors: [
          {
            line: 1,
            column: 10,
            message: "'foo' is defined but never used."
          }
        ]
      },
      {
        // non ascii.
        code: '###global 変数, 数###\n変数;',
        errors: [
          {
            line: 1,
            column: 14,
            message: "'数' is defined but never used."
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/4047
        code: 'export default (a) ->',
        errors: [
          {
            message: "'a' is defined but never used."
          }
        ]
      },
      {
        code: 'export default (a, b) -> console.log(a)',
        errors: [
          {
            message: "'b' is defined but never used."
          }
        ]
      },
      {
        code: 'export default ((a) ->)',
        errors: [
          {
            message: "'a' is defined but never used."
          }
        ]
      },
      {
        // caughtErrors
        code: 'try\ncatch err',
        options: [
          {
            caughtErrors: 'all'
          }
        ],
        errors: [
          {
            message: "'err' is defined but never used."
          }
        ]
      },
      {
        code: 'try\ncatch err',
        options: [
          {
            caughtErrors: 'all',
            caughtErrorsIgnorePattern: '^ignore'
          }
        ],
        errors: [
          {
            message: "'err' is defined but never used. Allowed unused args must match /^ignore/."
          }
        ]
      },
      {
        // multiple try catch with one success
        code: 'try\ncatch ignoreErr\ntry\ncatch err',
        options: [
          {
            caughtErrors: 'all',
            caughtErrorsIgnorePattern: '^ignore'
          }
        ],
        errors: [
          {
            message: "'err' is defined but never used. Allowed unused args must match /^ignore/."
          }
        ]
      },
      {
        // multiple try catch both fail
        code: 'try\ncatch error\ntry\ncatch err',
        options: [
          {
            caughtErrors: 'all',
            caughtErrorsIgnorePattern: '^ignore'
          }
        ],
        errors: [
          {
            message: "'error' is defined but never used. Allowed unused args must match /^ignore/."
          },
          {
            message: "'err' is defined but never used. Allowed unused args must match /^ignore/."
          }
        ]
      },
      {
        // caughtErrors with other configs
        code: 'try\ncatch err',
        options: [
          {
            vars: 'all',
            args: 'all',
            caughtErrors: 'all'
          }
        ],
        errors: [
          {
            message: "'err' is defined but never used."
          }
        ]
      },
      {
        // no conclict in ignore patterns
        code: 'try\ncatch err',
        options: [
          {
            vars: 'all',
            args: 'all',
            caughtErrors: 'all',
            argsIgnorePattern: '^er'
          }
        ],
        errors: [
          {
            message: "'err' is defined but never used."
          }
        ]
      },
      {
        // Ignore reads for modifications to itself: https://github.com/eslint/eslint/issues/6348
        code: 'a = 0\na = a + 1',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'a = 0\na = a + a',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'a = 0\na += a + 1',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'a = 0\na++',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'foo = (a) -> a = a + 1\nfoo()',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'foo = (a) ->\n  a += a + 1\n  null\nfoo()',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'foo = (a) -> a++\nfoo()',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'a = 3\na = a * 5 + 6',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'a = 2\nb = 4\na = a * 2 + b',
        errors: [
          {
            message: "'a' is assigned a value but never used."
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/6576 (For coverage)
        code: 'foo = (cb) ->\n  cb = (a) -> cb(1 + a)\n  bar(not_cb)\nfoo()',
        errors: [
          {
            message: "'cb' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'foo = (cb) ->\n  cb = do (a) -> cb(1 + a)\nfoo()',
        errors: [
          {
            message: "'cb' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'foo = (cb) ->\n  cb = (((a) -> cb(1 + a)); cb)\nfoo()',
        errors: [
          {
            message: "'cb' is assigned a value but never used."
          }
        ]
      },
      {
        code: 'foo = (cb) ->\n  cb = (0; (a) -> cb(1 + a))\nfoo()',
        errors: [
          {
            message: "'cb' is assigned a value but never used."
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/6646
        code: 'while a\n  foo = (b) -> b = b + 1\n  foo()',
        errors: [
          {
            message: "'b' is assigned a value but never used."
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/7124
        code: '(a, b, c) ->',
        options: [
          {
            argsIgnorePattern: 'c'
          }
        ],
        errors: [
          {
            message: "'a' is defined but never used. Allowed unused args must match /c/."
          },
          {
            message: "'b' is defined but never used. Allowed unused args must match /c/."
          }
        ]
      },
      {
        code: '(a, b, {c, d}) ->',
        options: [
          {
            argsIgnorePattern: '[cd]'
          }
        ],
        errors: [
          {
            message: "'a' is defined but never used. Allowed unused args must match /[cd]/."
          },
          {
            message: "'b' is defined but never used. Allowed unused args must match /[cd]/."
          }
        ]
      },
      {
        code: '(a, b, {c, d}) ->',
        options: [
          {
            argsIgnorePattern: 'c'
          }
        ],
        errors: [
          {
            message: "'a' is defined but never used. Allowed unused args must match /c/."
          },
          {
            message: "'b' is defined but never used. Allowed unused args must match /c/."
          },
          {
            message: "'d' is defined but never used. Allowed unused args must match /c/."
          }
        ]
      },
      {
        code: '(a, b, {c, d}) ->',
        options: [
          {
            argsIgnorePattern: 'd'
          }
        ],
        errors: [
          {
            message: "'a' is defined but never used. Allowed unused args must match /d/."
          },
          {
            message: "'b' is defined but never used. Allowed unused args must match /d/."
          },
          {
            message: "'c' is defined but never used. Allowed unused args must match /d/."
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/8442
        code: 'do ({ a }, b ) -> b',
        errors: ["'a' is defined but never used."]
      },
      {
        code: 'do ({ a }, { b, c } ) -> b',
        errors: ["'a' is defined but never used.",
      "'c' is defined but never used."]
      },
      {
        code: 'do ({ a, b }, { c } ) -> return b',
        errors: ["'a' is defined but never used.",
      "'c' is defined but never used."]
      },
      {
        code: 'do ([ a ], b ) -> b',
        errors: ["'a' is defined but never used."]
      },
      {
        code: 'do ([ a ], [ b, c ] ) -> b',
        errors: ["'a' is defined but never used.",
      "'c' is defined but never used."]
      },
      {
        code: '([ a, b ], [ c ] ) -> b',
        errors: ["'a' is defined but never used.",
      "'c' is defined but never used."]
      },
      {
        // https://github.com/eslint/eslint/issues/9774
        code: 'do (_a) ->',
        options: [
          {
            args: 'all',
            varsIgnorePattern: '^_'
          }
        ],
        errors: [
          {
            message: "'_a' is defined but never used."
          }
        ]
      },
      {
        code: 'do (_a) ->',
        options: [
          {
            args: 'all',
            caughtErrorsIgnorePattern: '^_'
          }
        ],
        errors: [
          {
            message: "'_a' is defined but never used."
          }
        ]
      }
    ]
  });

}).call(this);
