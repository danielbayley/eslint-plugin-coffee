// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-useless-constructor rule.
   * @author Alberto Rodriguez
   */
  'use strict';
  var RuleTester, error, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-useless-constructor');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  error = {
    message: 'Useless constructor.',
    type: 'MethodDefinition'
  };

  ruleTester.run('no-useless-constructor', rule, {
    valid: ['class A', 'class A\n  constructor: ->\n    doSomething()', "class A\n  constructor: ->\n    super 'foo'", 'class A extends B\n  constructor: ->', "class A extends B\n  constructor: ->\n    super('foo')", 'class A extends B\n  constructor: (foo, bar) -> super(foo, bar, 1)', 'class A extends B\n  constructor: ->\n    super()\n    doSomething()', 'class A extends B\n  constructor: (...args) ->\n    super(...args)\n    doSomething()', 'class A\n  dummyMethod: ->\n    doSomething()', 'class A extends B.C\n  constructor: ->\n    super(foo)', 'class A extends B.C\n  constructor: ([a, b, c]) ->\n    super(...arguments)', 'class A extends B.C\n  constructor: (a = f()) ->\n    super(...arguments)', 'class A extends B\n  constructor: (a, b, c) ->\n    super(a, b)', 'class A extends B\n  constructor: (foo, bar) ->\n    super(foo)', 'class A extends B\n  constructor: (test) ->\n    super()', 'class A extends B\n  constructor: ->\n    foo', 'class A extends B\n  constructor: (foo, bar) ->\n    super(bar)'],
    invalid: [
      {
        code: 'class A\n  constructor: ->',
        errors: [error]
      },
      {
        code: "class A\n  'constructor': ->",
        errors: [error]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super()',
        errors: [error]
      },
      {
        code: 'class A extends B\n  constructor: (foo) ->\n    super foo',
        errors: [error]
      },
      {
        code: 'class A extends B\n  constructor: (foo, bar) ->\n    super(foo, bar)',
        errors: [error]
      },
      {
        code: 'class A extends B\n  constructor: (...args) ->\n    super(...args)',
        errors: [error]
      },
      {
        code: 'class A extends B.C\n  constructor: ->\n    super(...arguments)',
        errors: [error]
      },
      {
        code: 'class A extends B\n  constructor: (a, b, ...c) ->\n    super(...arguments)',
        errors: [error]
      },
      {
        code: 'class A extends B\n  constructor: (a, b, ...c) ->\n    super(a, b, ...c)',
        errors: [error]
      }
    ]
  });

}).call(this);
