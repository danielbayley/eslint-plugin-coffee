// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for key-spacing rule.
   * @author Brandon Mills
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/key-spacing');

  ({RuleTester} = require('eslint'));

  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('key-spacing', rule, {
    valid: [
      '{\n}',
      '{\n  a: b\n}',
      '{\n  a:\n    b\n}',
      'a: b',
      'a:\n  b',
      {
        code: '{\n}',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: '{\n  a: b\n}',
        options: [
          {
            align: 'value'
          }
        ]
      },
      {
        code: 'obj = key: value',
        options: [{}]
      },
      {
        code: 'obj = { [(a + b)]: value }',
        options: [{}]
      },
      {
        code: 'foo = a:bar',
        options: [
          {
            beforeColon: false,
            afterColon: false
          }
        ]
      },
      {
        code: 'foo = a: bar',
        options: [
          {
            beforeColon: false,
            afterColon: true
          }
        ]
      },
      {
        code: "foo 'default': ->",
        options: [
          {
            beforeColon: false,
            afterColon: true
          }
        ]
      },
      {
        code: '->\n  return {\n    key: (foo is 4)\n  }',
        options: [
          {
            beforeColon: false,
            afterColon: true
          }
        ]
      },
      {
        code: "obj = {'key' :42 }",
        options: [
          {
            beforeColon: true,
            afterColon: false
          }
        ]
      },
      {
        code: "({a : foo, b : bar})['a']",
        options: [
          {
            beforeColon: true,
            afterColon: true
          }
        ]
      },
      {
        code: 'obj = {\n  \'a\'     : (42 - 12)\n  foobar  : \'value\'\n  [(expr)]: val\n}',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: 'callExpr arg,\n  key       :val\n  \'another\' :false\n  [compute] :\'value\'',
        options: [
          {
            align: 'colon',
            beforeColon: true,
            afterColon: false
          }
        ]
      },
      {
        code: 'obj =\n  a:        (42 - 12)\n  \'foobar\': \'value\'\n  bat:      ->\n      return this.a\n  baz: 42',
        options: [
          {
            align: 'value'
          }
        ]
      },
      {
        code: 'callExpr arg,\n  \'asdf\' :val\n  foobar :false\n  key :   value',
        options: [
          {
            align: 'value',
            beforeColon: true,
            afterColon: false
          }
        ]
      },
      {
        code: 'a  : 0\n# same group\nbcd: 0, ###\nend of group ###\n\n# different group\ne: 0\n### group b ###\nf: 0',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: 'obj = { key     :longName }',
        options: [
          {
            beforeColon: true,
            afterColon: false,
            mode: 'minimum'
          }
        ]
      },
      {
        code: "obj = {foo: 'fee', bar: 'bam'}",
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: "obj = a: 'foo', bar: 'bam'",
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: 'a = \'a\'\nb = \'b\'\n\nexport default {\n  a,\n  b\n}',
        options: [
          {
            align: 'value'
          }
        ]
      },
      {
        code: 'test = {\n  prop: 123,\n  a,\n  b\n}'
      },
      {
        code: 'test = {\n  prop: 456,\n  c,\n  d\n}',
        options: [
          {
            align: 'value'
          }
        ]
      },
      {
        code: 'obj = {\n  foobar: 123\n  prop\n  baz:    456\n}',
        options: [
          {
            align: 'value'
          }
        ]
      },
      {
        code: 'obj =\n  foo : foo\n  bar : bar\n  cats: cats',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: 'obj =\n  foo :  foo\n  bar :  bar\n  cats : cats',
        options: [
          {
            align: 'value',
            beforeColon: true
          }
        ]
      },
      {
        // https:#github.com/eslint/eslint/issues/4763
        code: "({a : foo, ...x, b : bar})['a']",
        options: [
          {
            beforeColon: true,
            afterColon: true
          }
        ]
      },
      {
        code: 'obj = {\n  \'a\'     : (42 - 12)\n  ...x\n  foobar  : \'value\'\n  [(expr)]: val\n}',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: 'callExpr arg, {\n    key       :val\n    ...x\n    ...y\n    \'another\' :false\n    [compute] :\'value\'\n}',
        options: [
          {
            align: 'colon',
            beforeColon: true,
            afterColon: false
          }
        ]
      },
      {
        code: 'obj = {\n  a:        (42 - 12)\n  ...x\n  \'foobar\': \'value\'\n  bat:      ->\n      return this.a\n  baz: 42\n}',
        options: [
          {
            align: 'value'
          }
        ]
      },
      {
        code: '{\n   ...x\n   a  : 0\n   # same group\n   bcd: 0 ###\n   end of group ###\n\n   # different group\n   e: 0\n   ...y\n   ### group b ###\n   f: 0\n}',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        code: 'obj = {\n  foobar: 42\n  bat:    2\n}',
        options: [
          {
            singleLine: {
              beforeColon: false,
              afterColon: true,
              mode: 'strict'
            },
            multiLine: {
              beforeColon: false,
              afterColon: true,
              mode: 'minimum'
            }
          }
        ]
      },
      {
        // https:#github.com/eslint/eslint/issues/5724
        code: '{...object}',
        options: [
          {
            align: 'colon'
          }
        ]
      },
      {
        // https:#github.com/eslint/eslint/issues/5613
        // if `align` is an object, but `on` is not declared, `on` defaults to `colon`
        code: '{\n   longName: 1\n   small   : 2\n   f       : ->\n     b\n   xs :3\n}',
        options: [
          {
            align: {
              afterColon: true
            },
            beforeColon: true,
            afterColon: false
          }
        ]
      },
      {
        code: 'longName: 1\nsmall:    2\nf:        ->\n  b\nxs :3',
        options: [
          {
            align: {
              on: 'value',
              afterColon: true
            },
            beforeColon: true,
            afterColon: false
          }
        ]
      },
      {
        code: '{\n   longName : 1\n   small :    2\n   xs :       3\n}',
        options: [
          {
            multiLine: {
              align: {
                on: 'value',
                beforeColon: true,
                afterColon: true
              }
            }
          }
        ]
      },
      {
        code: 'longName :1\nsmall    :2\nxs       :3',
        options: [
          {
            align: {
              on: 'colon',
              beforeColon: true,
              afterColon: false
            }
          }
        ]
      },
      {
        code: 'longName: 1\nsmall   : 2\nxs      :        3',
        options: [
          {
            align: {
              on: 'colon',
              beforeColon: false,
              afterColon: true,
              mode: 'minimum'
            }
          }
        ]
      },
      {
        code: 'longName: 1\nsmall   : 2\nxs      : 3',
        options: [
          {
            multiLine: {
              align: {
                on: 'colon',
                beforeColon: false,
                afterColon: true
              }
            }
          }
        ]
      },
      {
        code: 'func: ->\n  test = true\nlongName : 1\nsmall    : 2\nxs       : 3\nfunc2    : ->\n  test2 = true\ninternalGroup:\n  internal : true\n  ext      : false',
        options: [
          {
            singleLine: {
              beforeColon: false,
              afterColon: true
            },
            multiLine: {
              beforeColon: false,
              afterColon: true
            },
            align: {
              on: 'colon',
              beforeColon: true,
              afterColon: true
            }
          }
        ]
      },
      {
        code: '{\n  func: ->\n    test = true\n  longName: 1\n  small:    2\n  xs:       3\n  func2:    ->\n    test2 = true\n  final: 10\n}',
        options: [
          {
            singleLine: {
              beforeColon: false,
              afterColon: true
            },
            multiLine: {
              align: {
                on: 'value',
                beforeColon: false,
                afterColon: true
              },
              beforeColon: false,
              afterColon: true
            }
          }
        ]
      },
      {
        code: 'f:->\n  test = true\nstateName : \'NY\'\nborough   : \'Brooklyn\'\nzip       : 11201\nf2        : ->\n  test2 = true\nfinal:10',
        options: [
          {
            multiLine: {
              align: {
                on: 'colon',
                beforeColon: true,
                afterColon: true,
                mode: 'strict'
              },
              beforeColon: false,
              afterColon: false
            }
          }
        ]
      },
      {
        code: 'obj =\n  key1: 1\n\n  key2:    2\n  key3:    3\n\n  key4: 4',
        options: [
          {
            multiLine: {
              beforeColon: false,
              afterColon: true,
              mode: 'strict',
              align: {
                beforeColon: false,
                afterColon: true,
                on: 'colon',
                mode: 'minimum'
              }
            }
          }
        ]
      },
      {
        code: 'obj = {\n  key1: 1,\n\n  key2:    2,\n  key3:    3,\n\n  key4: 4\n}',
        options: [
          {
            multiLine: {
              beforeColon: false,
              afterColon: true,
              mode: 'strict'
            },
            align: {
              beforeColon: false,
              afterColon: true,
              on: 'colon',
              mode: 'minimum'
            }
          }
        ]
      }
    ],
    invalid: [
      {
        code: "bat = -> return { foo:bar, 'key': value }",
        output: "bat = -> return { foo:bar, 'key':value }",
        options: [
          {
            beforeColon: false,
            afterColon: false
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'key'.",
            type: 'Identifier',
            line: 1,
            column: 35
          }
        ]
      },
      {
        code: 'obj = { [ (a + b) ]:value }',
        output: 'obj = { [ (a + b) ]: value }',
        options: [{}],
        errors: [
          {
            message: "Missing space before value for computed key 'a + b'.",
            type: 'Identifier',
            line: 1,
            column: 21
          }
        ]
      },
      {
        code: "fn({ foo:bar, 'key' :value })",
        output: "fn({ foo:bar, 'key':value })",
        options: [
          {
            beforeColon: false,
            afterColon: false
          }
        ],
        errors: [
          {
            message: "Extra space after key 'key'.",
            type: 'Literal',
            line: 1,
            column: 15
          }
        ]
      },
      {
        code: 'obj = prop :(42)',
        output: 'obj = prop : (42)',
        options: [
          {
            beforeColon: true,
            afterColon: true
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'prop'.",
            type: 'Literal',
            line: 1,
            column: 13
          }
        ]
      },
      {
        code: "({'a' : foo, b: bar() }).b()",
        output: "({'a' : foo, b : bar() }).b()",
        options: [
          {
            beforeColon: true,
            afterColon: true
          }
        ],
        errors: [
          {
            message: "Missing space after key 'b'.",
            type: 'Identifier',
            line: 1,
            column: 14
          }
        ]
      },
      {
        code: "({'a'  :foo(), b:  bar() }).b()",
        output: "({'a' : foo(), b : bar() }).b()",
        options: [
          {
            beforeColon: true,
            afterColon: true
          }
        ],
        errors: [
          {
            message: "Extra space after key 'a'.",
            type: 'Literal',
            line: 1,
            column: 3
          },
          {
            message: "Missing space before value for key 'a'.",
            type: 'CallExpression',
            line: 1,
            column: 9
          },
          {
            message: "Missing space after key 'b'.",
            type: 'Identifier',
            line: 1,
            column: 16
          },
          {
            message: "Extra space before value for key 'b'.",
            type: 'CallExpression',
            line: 1,
            column: 20
          }
        ]
      },
      {
        code: 'bar = { key:value }',
        output: 'bar = { key: value }',
        options: [
          {
            beforeColon: false,
            afterColon: true
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'key'.",
            type: 'Identifier',
            line: 1,
            column: 13
          }
        ]
      },
      {
        code: 'obj =\n  key:   value\n  foobar:fn()\n  \'a\'   : (2 * 2)',
        output: 'obj =\n  key   : value\n  foobar: fn()\n  \'a\'   : (2 * 2)',
        options: [
          {
            align: 'colon'
          }
        ],
        errors: [
          {
            message: "Missing space after key 'key'.",
            type: 'Identifier',
            line: 2,
            column: 3
          },
          {
            message: "Extra space before value for key 'key'.",
            type: 'Identifier',
            line: 2,
            column: 10
          },
          {
            message: "Missing space before value for key 'foobar'.",
            type: 'CallExpression',
            line: 3,
            column: 10
          }
        ]
      },
      {
        code: '({\n  \'a\' : val\n  foo:fn()\n  b    :[42]\n  c   :call()\n}).a()',
        output: '({\n  \'a\' :val\n  foo :fn()\n  b   :[42]\n  c   :call()\n}).a()',
        options: [
          {
            align: 'colon',
            beforeColon: true,
            afterColon: false
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'a'.",
            type: 'Identifier',
            line: 2,
            column: 9
          },
          {
            message: "Missing space after key 'foo'.",
            type: 'Identifier',
            line: 3,
            column: 3
          },
          {
            message: "Extra space after key 'b'.",
            type: 'Identifier',
            line: 4,
            column: 3
          }
        ]
      },
      {
        code: 'obj =\n  a:    fn()\n  \'b\' : 42\n  foo:(bar)\n  bat: \'valid\'\n  [a] : value',
        output: 'obj =\n  a:   fn()\n  \'b\': 42\n  foo: (bar)\n  bat: \'valid\'\n  [a]: value',
        options: [
          {
            align: 'value'
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'a'.",
            type: 'CallExpression',
            line: 2,
            column: 9
          },
          {
            message: "Extra space after key 'b'.",
            type: 'Literal',
            line: 3,
            column: 3
          },
          {
            message: "Missing space before value for key 'foo'.",
            type: 'Identifier',
            line: 4,
            column: 7
          },
          {
            message: "Extra space after computed key 'a'.",
            type: 'Identifier',
            line: 6,
            column: 5
          }
        ]
      },
      {
        code: 'foo =\n  a:  value,\n  b :  42,\n  foo :[\'a\'],\n  bar : call(),',
        output: 'foo =\n  a :  value,\n  b :  42,\n  foo :[\'a\'],\n  bar :call(),',
        options: [
          {
            align: 'value',
            beforeColon: true,
            afterColon: false
          }
        ],
        errors: [
          {
            message: "Missing space after key 'a'.",
            type: 'Identifier',
            line: 2,
            column: 3
          },
          {
            message: "Extra space before value for key 'bar'.",
            type: 'CallExpression',
            line: 5,
            column: 9
          }
        ]
      },
      {
        code: 'a : 0\nbcd: 0\n\ne: 0\nfg:0',
        output: 'a  : 0\nbcd: 0\n\ne : 0\nfg: 0',
        options: [
          {
            align: 'colon'
          }
        ],
        errors: [
          {
            message: "Missing space after key 'a'.",
            type: 'Identifier',
            line: 1,
            column: 1
          },
          {
            message: "Missing space after key 'e'.",
            type: 'Identifier',
            line: 4,
            column: 1
          },
          {
            message: "Missing space before value for key 'fg'.",
            type: 'Literal',
            line: 5,
            column: 4
          }
        ]
      },
      {
        code: 'foo =\n  key1: 42\n  # still the same group\n  key12: \'42\' ###\n\n  ###\n  key123: \'forty two\'',
        output: 'foo =\n  key1:   42\n  # still the same group\n  key12:  \'42\' ###\n\n  ###\n  key123: \'forty two\'',
        options: [
          {
            align: 'value'
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'key1'.",
            type: 'Literal'
          },
          {
            message: "Missing space before value for key 'key12'.",
            type: 'Literal'
          }
        ]
      },
      {
        code: 'foo = { key:(1+2) }',
        output: 'foo = { key: (1+2) }',
        errors: [
          {
            message: "Missing space before value for key 'key'.",
            line: 1,
            column: 13,
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: 'foo = { key:( ( (1+2) ) ) }',
        output: 'foo = { key: ( ( (1+2) ) ) }',
        errors: [
          {
            message: "Missing space before value for key 'key'.",
            line: 1,
            column: 13,
            type: 'BinaryExpression'
          }
        ]
      },
      {
        code: "obj = {a  : 'foo', bar: 'bam'}",
        output: "obj = {a: 'foo', bar: 'bam'}",
        options: [
          {
            align: 'colon'
          }
        ],
        errors: [
          {
            message: "Extra space after key 'a'.",
            line: 1,
            column: 8,
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'obj = {\n  foobar: 123\n  prop\n  baz: 456\n}',
        output: 'obj = {\n  foobar: 123\n  prop\n  baz:    456\n}',
        options: [
          {
            align: 'value'
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'baz'.",
            line: 4,
            column: 8,
            type: 'Literal'
          }
        ]
      },
      {
        code: 'obj = {\n  foobar:  123\n  prop\n  baz:    456\n}',
        output: 'obj = {\n  foobar: 123\n  prop\n  baz:    456\n}',
        options: [
          {
            align: 'value'
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'foobar'.",
            line: 2,
            column: 12,
            type: 'Literal'
          }
        ]
      },
      {
        // https:#github.com/eslint/eslint/issues/4763
        code: '{\n  ...x\n  a : 0\n  # same group\n  bcd: 0 ###\n  end of group ###\n\n  # different group\n  e: 0\n  ...y\n  ### group b ###\n  f : 0\n}',
        output: '{\n  ...x\n  a  : 0\n  # same group\n  bcd: 0 ###\n  end of group ###\n\n  # different group\n  e: 0\n  ...y\n  ### group b ###\n  f: 0\n}',
        options: [
          {
            align: 'colon'
          }
        ],
        errors: [
          {
            message: "Missing space after key 'a'.",
            line: 3,
            column: 3,
            type: 'Identifier'
          },
          {
            message: "Extra space after key 'f'.",
            line: 12,
            column: 3,
            type: 'Identifier'
          }
        ]
      },
      {
        // https:#github.com/eslint/eslint/issues/5724
        code: '({ a:b, ...object, c : d })',
        output: '({ a: b, ...object, c: d })',
        options: [
          {
            align: 'colon'
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'a'.",
            line: 1,
            column: 6,
            type: 'Identifier'
          },
          {
            message: "Extra space after key 'c'.",
            line: 1,
            column: 20,
            type: 'Identifier'
          }
        ]
      },
      {
        // https:#github.com/eslint/eslint/issues/5613
        code: 'longName:1\nsmall    :2\nxs      : 3',
        output: 'longName : 1\nsmall    : 2\nxs       : 3',
        options: [
          {
            align: {
              on: 'colon',
              beforeColon: true,
              afterColon: true,
              mode: 'strict'
            }
          }
        ],
        errors: [
          {
            message: "Missing space after key 'longName'.",
            line: 1,
            column: 1,
            type: 'Identifier'
          },
          {
            message: "Missing space before value for key 'longName'.",
            line: 1,
            column: 10,
            type: 'Literal'
          },
          {
            message: "Missing space before value for key 'small'.",
            line: 2,
            column: 11,
            type: 'Literal'
          },
          {
            message: "Missing space after key 'xs'.",
            line: 3,
            column: 1,
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'func:->\n  test = true\nlongName: 1\nsmall: 2\nxs            : 3\nfunc2    : ->\n  test2 = true\nsingleLine : 10',
        output: 'func: ->\n  test = true\nlongName : 1\nsmall    : 2\nxs       : 3\nfunc2    : ->\n  test2 = true\nsingleLine: 10',
        options: [
          {
            multiLine: {
              beforeColon: false,
              afterColon: true
            },
            align: {
              on: 'colon',
              beforeColon: true,
              afterColon: true,
              mode: 'strict'
            }
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'func'.",
            line: 1,
            column: 6,
            type: 'FunctionExpression'
          },
          {
            message: "Missing space after key 'longName'.",
            line: 3,
            column: 1,
            type: 'Identifier'
          },
          {
            message: "Missing space after key 'small'.",
            line: 4,
            column: 1,
            type: 'Identifier'
          },
          {
            message: "Extra space after key 'xs'.",
            line: 5,
            column: 1,
            type: 'Identifier'
          },
          {
            message: "Extra space after key 'singleLine'.",
            line: 8,
            column: 1,
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'func:->\n  test = no\nlongName :1\nsmall :2\nxs            : 3\nfunc2    : ->\n  test2 = true\nsingleLine : 10',
        output: 'func: ->\n  test = no\nlongName :1\nsmall    :2\nxs       :3\nfunc2    :->\n  test2 = true\nsingleLine: 10',
        options: [
          {
            multiLine: {
              beforeColon: false,
              afterColon: true,
              align: {
                on: 'colon',
                beforeColon: true,
                afterColon: false,
                mode: 'strict'
              }
            }
          }
        ],
        errors: [
          {
            message: "Missing space before value for key 'func'.",
            line: 1,
            column: 6,
            type: 'FunctionExpression'
          },
          {
            message: "Missing space after key 'small'.",
            line: 4,
            column: 1,
            type: 'Identifier'
          },
          {
            message: "Extra space after key 'xs'.",
            line: 5,
            column: 1,
            type: 'Identifier'
          },
          {
            message: "Extra space before value for key 'xs'.",
            line: 5,
            column: 17,
            type: 'Literal'
          },
          {
            message: "Extra space before value for key 'func2'.",
            line: 6,
            column: 12,
            type: 'FunctionExpression'
          },
          {
            message: "Extra space after key 'singleLine'.",
            line: 8,
            column: 1,
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'obj =\n  key1: 1\n\n  key2:    2\n  key3:    3\n\n  key4: 4',
        output: 'obj =\n  key1: 1\n\n  key2: 2\n  key3: 3\n\n  key4: 4',
        options: [
          {
            multiLine: {
              beforeColon: false,
              afterColon: true,
              mode: 'strict',
              align: {
                beforeColon: false,
                afterColon: true,
                on: 'colon'
              }
            }
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'key2'.",
            line: 4,
            column: 12,
            type: 'Literal'
          },
          {
            message: "Extra space before value for key 'key3'.",
            line: 5,
            column: 12,
            type: 'Literal'
          }
        ]
      },
      {
        code: 'obj =\n  key1: 1\n\n  key2:    2\n  key3:    3\n\n  key4: 4',
        output: 'obj =\n  key1: 1\n\n  key2: 2\n  key3: 3\n\n  key4: 4',
        options: [
          {
            multiLine: {
              beforeColon: false,
              afterColon: true,
              mode: 'strict'
            },
            align: {
              beforeColon: false,
              afterColon: true,
              on: 'colon'
            }
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'key2'.",
            line: 4,
            column: 12,
            type: 'Literal'
          },
          {
            message: "Extra space before value for key 'key3'.",
            line: 5,
            column: 12,
            type: 'Literal'
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/7603
        code: '({ foo### comment ### : bar })',
        output: '({ foo### comment ###: bar })',
        errors: [
          {
            message: "Extra space after key 'foo'.",
            line: 1,
            column: 7,
            type: 'Identifier'
          }
        ]
      },
      {
        code: '({ foo: ### comment ###bar })',
        output: '({ foo:### comment ###bar })',
        options: [
          {
            afterColon: false
          }
        ],
        errors: [
          {
            message: "Extra space before value for key 'foo'.",
            line: 1,
            column: 9,
            type: 'Identifier'
          }
        ]
      },
      {
        code: '({ foo###comment###:###comment###bar })',
        output: '({ foo###comment### : ###comment###bar })',
        options: [
          {
            beforeColon: true,
            afterColon: true
          }
        ],
        errors: [
          {
            message: "Missing space after key 'foo'.",
            line: 1,
            column: 7,
            type: 'Identifier'
          },
          {
            message: "Missing space before value for key 'foo'.",
            line: 1,
            column: 21,
            type: 'Identifier'
          }
        ]
      }
    ]
  });

}).call(this);
