// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-unreachable rule.
   * @author Joel Feenstra
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-unreachable');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-unreachable', rule, {
    valid: ['->\n  bar = -> return 1\n  return bar()', '->\n  x = 1\n  y = 2', 'foo = ->\n  x = 1\n  y = 2\n  return', 'while yes\n  switch foo\n    when 1\n      x = 1\n      x = 2', 'while true\n  continue', '->\n  x = 1\n  return if x\n  x = 2', '->\n  x = 1\n  if x\n  else\n    return\n  x = 2', '->\n  x = 1\n  switch x\n    when 0\n      break\n    else\n      return\n  x = 2', '->\n  x = 1\n  while x\n    return\n  x = 2', 'x = 1\nfor x of {}\n  return\nx = 2', 'x = 1\nfor x in [1, 2, 3] when foo x\n  return\nx = 2', '->\n  x = 1\n  try\n    return\n  finally\n    x = 2', '->\n  x = 1\n  loop\n    if x\n      break\n  x = 2'],
    invalid: [
      {
        code: '->\n  return x\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'while yes\n  continue\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'until yes\n  continue\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'loop\n  continue\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  return\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  throw error\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'while yes\n  break\n  x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'switch foo\n  when 1\n    return\n    x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'switch foo\n  when 1\n    throw e\n    x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'while yes\n  switch foo\n    when 1\n      break\n      x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'while yes\n  switch foo\n    when 1\n      continue\n      x = 1',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: "x = 1\nthrow 'uh oh'\ny = 2",
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  if x\n    return\n  else\n    throw e\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  if x\n    return\n  else\n    throw -1\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  try\n    return\n  finally\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  try\n  finally\n    return\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'x = 1\nwhile x\n  if x\n    break\n  else\n    continue\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  loop\n    continue if x\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  while true\n    ;\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  loop\n    ;\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  for item in list\n    continue\n    foo()\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '->\n  x = 1\n  for key, val of obj\n    break\n    foo()\n  x = 2',
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        // Merge the warnings of continuous unreachable nodes.
        code: "->\n  return\n\n  a()  # ← ERROR: Unreachable code. (no-unreachable)\n\n  b()  # ↑ ';' token is included in the unreachable code, so this statement will be merged.\n  # comment\n  c()  # ↑ ')' token is included in the unreachable code, so this statement will be merged.",
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement',
            line: 4,
            column: 3,
            endLine: 8,
            endColumn: 6
          }
        ]
      },
      {
        code: "->\n  return\n\n  a()\n\n  if b()\n    c()\n  else\n    d()",
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement',
            line: 4,
            column: 3,
            endLine: 9,
            endColumn: 8
          }
        ]
      },
      {
        code: "->\n  if a\n    return\n    b()\n    c()\n  else\n    throw err\n    d()",
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement',
            line: 4,
            column: 5,
            endLine: 5,
            endColumn: 8
          },
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement',
            line: 8,
            column: 5,
            endLine: 8,
            endColumn: 8
          }
        ]
      },
      {
        code: "->\n  if a\n    return\n    b()\n    c()\n  else\n    throw err\n    d()\n  e()",
        errors: [
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement',
            line: 4,
            column: 5,
            endLine: 5,
            endColumn: 8
          },
          {
            message: 'Unreachable code.',
            type: 'ExpressionStatement',
            line: 8,
            column: 5,
            endLine: 9,
            endColumn: 6
          }
        ]
      }
    ]
  });

}).call(this);
