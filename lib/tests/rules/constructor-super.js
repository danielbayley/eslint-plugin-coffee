// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for constructor-super rule.
   * @author Toru Nagashima
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/constructor-super');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('constructor-super', rule, {
    valid: [
      // non derived classes.
      'class A',
      'class A\n  constructor: ->',
      /*
       * inherit from non constructors.
       * those are valid if we don't define the constructor.
       */
      'class A extends null',
      // derived classes.
      'class A extends B',
      'class A extends B\n  constructor: -> super()',
      'class A extends B\n  constructor: ->\n    if true\n      super()\n    else\n      super()',
      'class A extends (class B)\n  constructor: -> super()',
      'class A extends (B = C)\n  constructor: -> super()',
      'class A extends (B or C)\n  constructor: -> super()',
      'class A extends (if a then B else C)\n  constructor: -> super()',
      'class A extends (B; C)\n  constructor: -> super()',
      // nested.
      'class A\n  constructor: ->\n    class B extends C\n      constructor: ->\n        super()',
      'class A extends B\n  constructor: ->\n    super()\n    class C extends D\n      constructor: -> super()',
      'class A extends B\n  constructor: ->\n    super()\n    class C\n      constructor: ->',
      // ignores out of constructors.
      'class A\n  b: -> super()',
      // multi code path.
      'class A extends B\n  constructor: ->\n    if a then super() else super()',
      'class A extends B\n  constructor: ->\n    if a\n      super()\n    else\n      super()',
      'class A extends B\n  constructor: ->\n    switch a\n      when 0, 1\n        super()\n      else\n        super()',
      'class A extends B\n  constructor: ->\n    try\n    finally\n      super()',
      'class A extends B\n  constructor: ->\n    if a\n      throw Error()\n    super()',
      // returning value is a substitute of 'super()'.
      'class A extends B\n  constructor: ->\n    return a if yes\n    super()',
      'class A extends null\n  constructor: ->\n    return a',
      'class A\n  constructor: ->\n    return a',
      // https://github.com/eslint/eslint/issues/5261
      'class A extends B\n  constructor: (a) ->\n    super()\n    for b from a\n      @a()',
      // https://github.com/eslint/eslint/issues/5319
      'class Foo extends Object\n  constructor: (method) ->\n    super()\n    @method = method or ->',
      // https://github.com/eslint/eslint/issues/5894
      'class A\n  constructor: ->\n    return\n    super()',
      // https://github.com/eslint/eslint/issues/8848
      'class A extends B\n  constructor: (props) ->\n      super props\n\n      try\n        arr = []\n        for a from arr\n          ;\n      catch err'
    ],
    invalid: [
      {
        // non derived classes.
        code: 'class A\n  constructor: -> super()',
        errors: [
          {
            messageId: 'unexpected',
            type: 'CallExpression'
          }
        ]
      },
      {
        // inherit from non constructors.
        code: 'class A extends null\n  constructor: ->\n    super()',
        errors: [
          {
            messageId: 'badSuper',
            type: 'CallExpression'
          }
        ]
      },
      {
        code: 'class A extends null\n  constructor: ->',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends 100\n  constructor: -> super()',
        errors: [
          {
            messageId: 'badSuper',
            type: 'CallExpression'
          }
        ]
      },
      {
        code: "class A extends 'test'\n  constructor: -> super()",
        errors: [
          {
            messageId: 'badSuper',
            type: 'CallExpression'
          }
        ]
      },
      {
        // derived classes.
        code: 'class A extends B\n  constructor: ->',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    for a from b\n      super.foo()',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        // nested execution scope.
        code: 'class A extends B\n  constructor: ->\n    c = -> super()',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    c = => super()',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    class C extends D\n      constructor: -> super()',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition',
            line: 2
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    C = class extends D\n      constructor: -> super()',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition',
            line: 2
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super()\n    class C extends D\n      constructor: ->',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition',
            line: 5
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super()\n    C = class extends D\n      constructor: ->',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition',
            line: 5
          }
        ]
      },
      {
        // lacked in some code path.
        code: 'class A extends B\n  constructor: ->\n    if a\n      super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    if a\n      ;\n    else super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    a and super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    switch a\n      when 0\n        super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    switch a\n      when 0\n        ;\n      else\n        super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    try\n      super()\n    catch err',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    try\n      a\n    catch err\n      super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    return if a\n    super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        // duplicate.
        code: 'class A extends B\n  constructor: ->\n    super()\n    super()',
        errors: [
          {
            messageId: 'duplicate',
            type: 'CallExpression',
            line: 4
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super() or super()',
        errors: [
          {
            messageId: 'duplicate',
            type: 'CallExpression',
            line: 3,
            column: 16
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super() ? super()',
        errors: [
          {
            messageId: 'duplicate',
            type: 'CallExpression',
            line: 3,
            column: 15
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: ->\n    super() if a\n    super()',
        errors: [
          {
            messageId: 'duplicate',
            type: 'CallExpression',
            line: 4
          }
        ]
      },
      {
        code: 'class A extends B\n  constructor: (a) ->\n    while a\n      super()',
        errors: [
          {
            messageId: 'missingSome',
            type: 'MethodDefinition'
          },
          {
            messageId: 'duplicate',
            type: 'CallExpression',
            line: 4
          }
        ]
      },
      {
        // ignores `super()` on unreachable paths.
        code: 'class A extends B\n  constructor: ->\n    return\n    super()',
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      },
      {
        // https://github.com/eslint/eslint/issues/8248
        code: "class Foo extends Bar\n  constructor: ->\n    for a of b\n      for c of d\n        ;",
        errors: [
          {
            messageId: 'missingAll',
            type: 'MethodDefinition'
          }
        ]
      }
    ]
  });

}).call(this);
