// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Disallow redundant return statements
   * @author Teddy Katz
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-useless-return');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-useless-return', rule, {
    valid: [
      '-> return 5',
      '-> 5',
      '-> return null',
      '-> return doSomething()',
      "->\n  if bar\n    doSomething()\n    return\n  else\n    doSomethingElse()\n  qux()",
      "foo = ->\n  switch bar\n    when 1\n      doSomething()\n      return\n    else\n      doSomethingElse()",
      "->\n  switch bar\n    when 1\n      if a\n        doSomething()\n        return\n      else\n        doSomething()\n        return\n    else\n      doSomethingElse()",
      "->\n  for foo of bar\n    return",
      "->\n  return for foo of bar",
      "->\n  try\n    return 5\n  finally\n    return # This is allowed because it can override the returned value of 5",
      "->\n  return\n  doSomething()",
      "->\n  for foo from bar\n    return",
      '->\n  return if foo\n  bar()',
      '-> 5',
      '->\n  return\n  doSomething()',
      'if foo\n  return\ndoSomething()',
      // https://github.com/eslint/eslint/issues/7477
      "->\n  if bar\n    return\n  return baz",
      "->\n  if bar\n    baz\n  else\n    return\n  return 5",
      // https://github.com/eslint/eslint/issues/7583
      "->\n  return\n  while foo\n    return\n  foo",
      // https://github.com/eslint/eslint/issues/7855
      "try\n  throw new Error 'foo'\n  while no\n    ;\ncatch err"
    ],
    invalid: [
      {
        code: '-> return',
        output: '-> '
      },
      {
        code: '->\n  return',
        output: '->\n  '
      },
      {
        code: '->\n  doSomething()\n  return',
        output: '->\n  doSomething()\n  '
      },
      {
        code: 'foo = ->\n  if condition\n    bar()\n    return\n  else\n    baz()',
        output: 'foo = ->\n  if condition\n    bar()\n    \n  else\n    baz()'
      },
      {
        code: '-> if foo then return',
        output: '-> if foo then return'
      },
      {
        code: 'foo()\nreturn',
        output: 'foo()\n'
      },
      {
        code: 'if foo\n  bar()\n  return\nelse\n  baz()',
        output: 'if foo\n  bar()\n  \nelse\n  baz()'
      },
      {
        code: "->\n  if foo\n    return\n  return",
        output: "->\n  if foo\n    return\n  ",
        errors: [
          {
            message: 'Unnecessary return statement.',
            type: 'ReturnStatement'
          },
          {
            message: 'Unnecessary return statement.',
            type: 'ReturnStatement'
          }
        ]
      },
      {
        code: "->\n  switch bar\n    when 1\n      doSomething()\n    else\n      doSomethingElse()\n      return",
        output: "->\n  switch bar\n    when 1\n      doSomething()\n    else\n      doSomethingElse()\n      "
      },
      {
        code: "->\n  switch bar\n    when 1\n      if a\n        doSomething()\n        return\n      break\n    else\n      doSomethingElse()",
        output: "->\n  switch bar\n    when 1\n      if a\n        doSomething()\n        \n      break\n    else\n      doSomethingElse()"
      },
      {
        code: "->\n  switch bar\n    when 1\n      if a\n        doSomething()\n        return\n      else\n        doSomething()\n      break\n    else\n      doSomethingElse()",
        output: "->\n  switch bar\n    when 1\n      if a\n        doSomething()\n        \n      else\n        doSomething()\n      break\n    else\n      doSomethingElse()"
      },
      {
        code: "->\n  try\n  catch err\n    return",
        output: "->\n  try\n  catch err\n    "
      },
      {
        /*
         * FIXME: Re-add this case (removed due to https://github.com/eslint/eslint/issues/7481):
         * https://github.com/eslint/eslint/blob/261d7287820253408ec87c344beccdba2fe829a4/tests/lib/rules/no-useless-return.js#L308-L329
         */
        code: "->\n  try\n  finally\n  return",
        output: "->\n  try\n  finally\n  "
      },
      {
        code: "->\n  try\n    return 5\n  finally\n    bar = ->\n      return",
        output: "->\n  try\n    return 5\n  finally\n    bar = ->\n      "
      },
      {
        code: '() => return',
        output: '() => '
      },
      {
        code: '->\n  return\n  return',
        output: '->\n  \n  return', // Other case is fixed in the second pass.
        errors: [
          {
            message: 'Unnecessary return statement.',
            type: 'ReturnStatement'
          },
          {
            message: 'Unnecessary return statement.',
            type: 'ReturnStatement'
          }
        ]
      }
    ].map(function(invalidCase) {
      return Object.assign({
        errors: [
          {
            message: 'Unnecessary return statement.',
            type: 'ReturnStatement'
          }
        ]
      }, invalidCase);
    })
  });

}).call(this);
