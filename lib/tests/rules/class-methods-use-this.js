// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for class-methods-use-this rule.
   * @author Patrick Williams
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/class-methods-use-this');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('class-methods-use-this', rule, {
    valid: [
      {
        code: 'class A\n  constructor: ->'
      },
      {
        code: 'class A\n  foo: -> this'
      },
      {
        code: 'class A\n  foo: -> @'
      },
      {
        code: 'class A\n  foo: => @'
      },
      {
        code: "class A\n  foo: -> this.bar = 'bar'"
      },
      {
        code: "class A\n  foo: -> @bar = 'bar'"
      },
      {
        code: 'class A\n  foo: -> bar @'
      },
      {
        code: 'class A extends B\n  foo: -> super.foo()'
      },
      {
        code: 'class A\n  foo: -> return @ if yes'
      },
      {
        code: 'class A\n  @foo: ->'
      },
      {
        code: 'a: ->'
      },
      {
        code: 'class A\n  foo: -> => @'
      },
      {
        code: 'class A\n  foo: -> this\n  bar: ->',
        options: [
          {
            exceptMethods: ['bar']
          }
        ]
      }
    ],
    invalid: [
      {
        code: 'class A\n  foo: ->',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: =>',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: -> ###*this*###',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: ->\n    a = -> this',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: -> \n    a = ->\n      b = -> this',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: -> window.this',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: "class A\n  foo: -> that.this = 'this'",
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: -> => undefined',
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: ->\n  bar: ->',
        options: [
          {
            exceptMethods: ['bar']
          }
        ],
        errors: [
          {
            type: 'FunctionExpression',
            line: 2,
            column: 5,
            messageId: 'missingThis',
            data: {
              name: 'foo'
            }
          }
        ]
      },
      {
        code: 'class A\n  foo: ->\n  hasOwnProperty: ->',
        options: [
          {
            exceptMethods: ['foo']
          }
        ],
        errors: [
          {
            type: 'FunctionExpression',
            line: 3,
            column: 16,
            messageId: 'missingThis',
            data: {
              name: 'hasOwnProperty'
            }
          }
        ]
      }
    ]
  });

}).call(this);
