// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for lines-between-class-members rule.
   * @author 薛定谔的猫<hh_2013@foxmail.com>
   */
  'use strict';
  var ALWAYS_MESSAGE, NEVER_MESSAGE, RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/lines-between-class-members');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  ALWAYS_MESSAGE = 'Expected blank line between class members.';

  NEVER_MESSAGE = 'Unexpected blank line between class members.';

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('lines-between-class-members', rule, {
    valid: [
      'class foo',
      'class foo\n  constructor: ->',
      'class foo\n  bar: ->\n  \n  baz: ->',
      'class foo\n  bar: ->\n  \n  ###comments###\n  baz: ->',
      'class foo\n  bar: ->\n  \n  #comments\n  baz: ->',
      'class foo\n  bar: ->\n  #comments\n  \n  baz: ->',
      'class A\n  foo: -> # a comment\n  \n  bar: ->',
      'class A\n  foo: ->\n  ### a ### ### b ###\n\n  bar: ->',
      'class A\n  foo: -> ### a ###\n  \n  ### b ###\n  bar: ->',
      {
        code: 'class foo\n  bar: ->\n  baz: ->',
        options: ['never']
      },
      {
        code: 'class foo\n  bar: ->\n  ###comments###\n  baz: ->',
        options: ['never']
      },
      {
        code: 'class foo\n  bar: ->\n  #comments\n  baz: ->',
        options: ['never']
      },
      {
        code: 'class foo\n  bar: ->\n  ### comments\n\n  ###\n  baz: ->',
        options: ['never']
      },
      {
        code: 'class foo\n  bar: -> ### \n    comments\n  ###\n  baz: ->',
        options: ['never']
      },
      {
        code: 'class foo\n  bar: ->\n  ### \n   comments\n  ###\n  baz: ->',
        options: ['never']
      },
      {
        code: 'class foo\n  bar: ->\n  \n  baz: ->',
        options: ['always']
      },
      {
        code: 'class foo\n  bar: ->\n  \n  ###comments###\n  baz: ->',
        options: ['always']
      },
      {
        code: 'class foo\n  bar: ->\n  \n  #comments\n  baz: ->',
        options: ['always']
      },
      {
        code: 'class foo\n  bar: ->\n  baz: ->',
        options: [
          'always',
          {
            exceptAfterSingleLine: true
          }
        ]
      },
      {
        code: 'class foo\n  bar: ->\n\n  baz: ->',
        options: [
          'always',
          {
            exceptAfterSingleLine: true
          }
        ]
      },
      {
        code: 'class foo\n  @a: 1\n  b = 2',
        options: [
          'always',
          {
            exceptAfterSingleLine: true
          }
        ]
      },
      'class foo\n  @a: 1\n\n  b = 2\n\n  c = ->\n    if d\n      e\n\n  f: g'
    ],
    invalid: [
      {
        code: 'class foo\n  bar: ->\n  baz: ->',
        // output: '''
        //   class foo
        //     bar: ->
        //     baz: ->
        // '''
        options: ['always'],
        errors: [
          {
            message: ALWAYS_MESSAGE
          }
        ]
      },
      {
        code: 'class foo\n  bar: ->\n\n  baz: ->',
        // output: '''
        //   class foo
        //     bar: ->
        //     baz: ->
        // '''
        options: ['never'],
        errors: [
          {
            message: NEVER_MESSAGE
          }
        ]
      },
      {
        code: 'class foo\n  bar: ->\n    a\n  baz: ->',
        // output: '''
        //   class foo
        //     bar: ->
        //       a
        //     baz: ->
        // '''
        options: [
          'always',
          {
            exceptAfterSingleLine: true
          }
        ],
        errors: [
          {
            message: ALWAYS_MESSAGE
          }
        ]
      },
      {
        code: 'class foo\n  @a: 1\n  b = 2',
        errors: [
          {
            message: ALWAYS_MESSAGE
          }
        ]
      },
      {
        code: 'class foo\n  c = ->\n    if d\n      e\n  f: g',
        errors: [
          {
            message: ALWAYS_MESSAGE
          }
        ]
      }
    ]
  });

}).call(this);
