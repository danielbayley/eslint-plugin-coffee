// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for consistent-this rule.
   * @author Raphael Pigulla
   */
  'use strict';
  var RuleTester, destructuringTest, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/consistent-this');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  /**
   * A destructuring Test
   * @param {string} code source code
   * @returns {Object} Suitable object
   * @private
   */
  destructuringTest = function(code) {
    return {
      code,
      options: ['self']
    };
  };

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('consistent-this', rule, {
    valid: [
      'foo = 42\nthat = this',
      {
        code: 'foo = 42\nself = this',
        options: ['self']
      },
      {
        code: 'self = 42',
        options: ['that']
      },
      {
        code: 'self',
        options: ['that']
      },
      {
        code: 'self = null\nself = this',
        options: ['self']
      },
      {
        code: 'self = null\nself = @',
        options: ['self']
      },
      {
        code: 'foo = self = null\nself = this',
        options: ['self']
      },
      {
        code: 'self = foo = null\nfoo = 42\nself = this',
        options: ['self']
      },
      {
        code: 'self = 42',
        options: ['that']
      },
      {
        code: 'foo = {}\nfoo.bar = this',
        options: ['self']
      },
      {
        code: 'self = this\nvm = this',
        options: ['self',
      'vm']
      },
      destructuringTest('{foo, bar} = this'),
      destructuringTest('[foo, bar] = this')
    ],
    invalid: [
      {
        code: 'context = this',
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'context'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'that = this',
        options: ['self'],
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'that'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'foo = 42\nself = this',
        options: ['that'],
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'self'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'self = 42',
        options: ['self'],
        errors: [
          {
            messageId: 'aliasNotAssignedToThis',
            data: {
              name: 'self'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'self = null',
        options: ['self'],
        errors: [
          {
            messageId: 'aliasNotAssignedToThis',
            data: {
              name: 'self'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'self = null\nself = 42',
        options: ['self'],
        errors: [
          {
            messageId: 'aliasNotAssignedToThis',
            data: {
              name: 'self'
            },
            type: 'Identifier'
          },
          {
            messageId: 'aliasNotAssignedToThis',
            data: {
              name: 'self'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'context = this',
        options: ['that'],
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'context'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'context = @',
        options: ['that'],
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'context'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'that = this',
        options: ['self'],
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'that'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'self = this',
        options: ['that'],
        errors: [
          {
            messageId: 'unexpectedAlias',
            data: {
              name: 'self'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'self += this',
        options: ['self'],
        errors: [
          {
            messageId: 'aliasNotAssignedToThis',
            data: {
              name: 'self'
            },
            type: 'AssignmentExpression'
          }
        ]
      },
      {
        code: 'self = null\ndo -> self = this',
        options: ['self'],
        errors: [
          {
            messageId: 'aliasNotAssignedToThis',
            data: {
              name: 'self'
            },
            type: 'Identifier'
          }
        ]
      }
    ]
  });

}).call(this);
