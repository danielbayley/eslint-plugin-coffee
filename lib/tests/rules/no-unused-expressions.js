// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-unused-expressions rule.
   * @author Michael Ficarra
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-unused-expressions');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-unused-expressions', rule, {
    valid: [
      'f = ->',
      'a = b',
      'new a',
      'f()\ng()',
      'i++',
      'a()',
      'a?()',
      'do a',
      {
        // 'do -> a'
        code: 'a && a()',
        options: [
          {
            allowShortCircuit: true
          }
        ]
      },
      {
        code: 'a and a()',
        options: [
          {
            allowShortCircuit: true
          }
        ]
      },
      {
        code: 'a() || (b = c)',
        options: [
          {
            allowShortCircuit: true
          }
        ]
      },
      {
        code: 'a() or (b = c)',
        options: [
          {
            allowShortCircuit: true
          }
        ]
      },
      {
        code: 'a() ? (b = c)',
        options: [
          {
            allowShortCircuit: true
          }
        ]
      },
      {
        code: '(if a then b() else c())',
        options: [
          {
            allowTernary: true
          }
        ]
      },
      {
        code: '(if a then b() || (c = d) else e())',
        options: [
          {
            allowShortCircuit: true,
            allowTernary: true
          }
        ]
      },
      'delete foo.bar',
      '"use strict"',
      '"directive one"\n"directive two"\nf()',
      // '''
      //   foo = ->
      //     "use strict"
      //     true
      // '''
      'foo = ->\n  "directive one"\n  "directive two"\n  f()',
      'foo = ->\n  foo = "use strict"\n  return true',
      'foo = -> yield 0',
      'foo = -> await 5',
      'foo = -> await foo.bar',
      {
        code: 'foo = -> bar && await baz',
        options: [
          {
            allowShortCircuit: true
          }
        ]
      },
      {
        code: 'foo = -> (if foo then await bar else await baz)',
        options: [
          {
            allowTernary: true
          }
        ]
      },
      {
        code: 'tag"tagged template literal"',
        options: [
          {
            allowTaggedTemplates: true
          }
        ]
      },
      {
        code: 'shouldNotBeAffectedByAllowTemplateTagsOption()',
        options: [
          {
            allowTaggedTemplates: true
          }
        ]
      }
    ],
    invalid: [
      {
        code: '0',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'a',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'f(); 0',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '{0}',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '[]',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'a && b()',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'a() || false',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'a || (b = c)',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '(if a then b() || (c = d) else e)',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '"untagged #{template} literal"',
        errors: ['Expected an assignment or function call and instead saw an expression.']
      },
      {
        code: 'tag"tagged template literal"',
        errors: ['Expected an assignment or function call and instead saw an expression.']
      },
      {
        code: 'a && b()',
        options: [
          {
            allowTernary: true
          }
        ],
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '(if a then b() else c())',
        options: [
          {
            allowShortCircuit: true
          }
        ],
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'a || b',
        options: [
          {
            allowShortCircuit: true
          }
        ],
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'a() && b',
        options: [
          {
            allowShortCircuit: true
          }
        ],
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '(if a then b else 0)',
        options: [
          {
            allowTernary: true
          }
        ],
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '(if a then b else c())',
        options: [
          {
            allowTernary: true
          }
        ],
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'foo.bar',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '!a',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '+a',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '"directive one"\nf()\n"directive two"',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'foo = ->\n  "directive one"\n  f()\n  "directive two"',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'if 0\n  "not a directive"\n  f()',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: 'foo = ->\n  foo = yes\n  "use strict"',
        errors: [
          {
            message: 'Expected an assignment or function call and instead saw an expression.',
            type: 'ExpressionStatement'
          }
        ]
      },
      {
        code: '"untagged #{template} literal"',
        options: [
          {
            allowTaggedTemplates: true
          }
        ],
        errors: ['Expected an assignment or function call and instead saw an expression.']
      },
      {
        code: '"untagged #{template} literal"',
        options: [
          {
            allowTaggedTemplates: false
          }
        ],
        errors: ['Expected an assignment or function call and instead saw an expression.']
      },
      {
        code: 'tag"tagged #{template} literal"',
        options: [
          {
            allowTaggedTemplates: false
          }
        ],
        errors: ['Expected an assignment or function call and instead saw an expression.']
      }
    ]
  });

}).call(this);
