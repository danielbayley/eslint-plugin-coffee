// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-inner-declarations rule.
   * @author Brandon Mills
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-inner-declarations');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-inner-declarations', rule, {
    // Examples of code that should not trigger the rule
    valid: [
      'doSomething = ->',
      'doSomething = ->\n  somethingElse = ->',
      '(->\n  doSomething = ->\n)()',
      'do ->\n  doSomething = ->',
      'decl = (arg) ->\n  fn = null\n  if arg\n    fn = ->',
      'x =\n  doSomething: ->\n    doSomethingElse = ->',
      'decl = (arg) ->\n  fn = null\n  if arg\n    fn = ->',
      'if test\n  foo = null',
      'doSomething = ->\n  while test\n    foo = null',
      {
        code: 'foo = null',
        options: ['both']
      },
      {
        code: 'foo = 42',
        options: ['both']
      },
      {
        code: 'doSomething = ->\n  foo = null',
        options: ['both']
      },
      {
        code: 'do ->\n  foo = null',
        options: ['both']
      },
      {
        code: 'foo =>\n  bar = ->'
      },
      {
        code: 'fn = =>\n  foo = null',
        options: ['both']
      },
      {
        code: 'x = {\n  doSomething: ->\n    foo = null\n}',
        options: ['both']
      },
      {
        code: 'foo = baz = null\nif test\n  [foo, {bar: baz} = {}] = null',
        options: ['both']
      },
      'b for b in c',
      '(a) ->'
    ],
    // Examples of code that should trigger the rule
    invalid: [
      {
        code: 'if test\n  fn = ->',
        errors: [
          {
            message: 'Move function declaration to program root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'if test\n  x = 1',
        options: ['both'],
        errors: [
          {
            message: 'Move variable declaration to program root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'if test\n  doSomething = ->',
        options: ['both'],
        errors: [
          {
            message: 'Move function declaration to program root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'doSomething = ->\n  while test\n    somethingElse = ->',
        errors: [
          {
            message: 'Move function declaration to function body root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'do ->\n  if test\n    doSomething = ->',
        errors: [
          {
            message: 'Move function declaration to function body root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'while test\n  foo = null',
        options: ['both'],
        errors: [
          {
            message: 'Move variable declaration to program root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'doSomething = ->\n  if test\n    foo = 42',
        options: ['both'],
        errors: [
          {
            message: 'Move variable declaration to function body root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'do ->\n  if test\n    foo = null',
        options: ['both'],
        errors: [
          {
            message: 'Move variable declaration to function body root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'if test\n  {foo, bar} = null',
        options: ['both'],
        errors: [
          {
            message: 'Move variable declaration to program root.',
            type: 'Identifier'
          },
          {
            message: 'Move variable declaration to program root.',
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'if test\n  [foo, {bar: baz} = {}] = null',
        options: ['both'],
        errors: [
          {
            message: 'Move variable declaration to program root.',
            type: 'Identifier'
          },
          {
            message: 'Move variable declaration to program root.',
            type: 'Identifier'
          }
        ]
      }
    ]
  });

}).call(this);
