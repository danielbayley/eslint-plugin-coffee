// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-invalid-this rule.
   * @author Toru Nagashima
   */
  'use strict';
  var RuleTester, errors, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('../../rules/no-invalid-this');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  errors = [
    {
      message: "Unexpected 'this'.",
      type: 'ThisExpression'
    },
    {
      message: "Unexpected 'this'.",
      type: 'ThisExpression'
    }
  ];

  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-invalid-this', rule, {
    valid: [
      'obj =\n  foo: if hasNative then foo else ->\n    console.log(this)\n    z (x) => console.log(x, this)',
      'obj = {\n  foo: (->\n    return ->\n      console.log(this)\n      z (x) => console.log(x, this)\n  )()\n}',
      'obj = {\n  foo: do -> ->\n    console.log(this)\n    z (x) => console.log(x, this)\n}',
      'Object.defineProperty obj, "foo",\n  value: ->\n    console.log this\n    z (x) => console.log(x, this)',
      'Object.defineProperties obj,\n  foo:\n    value: ->\n      console.log this\n      z (x) => console.log(x, this)',
      // Assigns to a property.
      'obj.foo = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'obj.foo = foo or ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'obj.foo = if foo then bar else ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'obj.foo = do ->\n  ->\n    console.log(this)\n    z (x) => console.log(x, this)',
      'obj.foo = do => ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'obj::foo = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'Reflect.apply ->\n  console.log this\n  z (x) => console.log(x, this)\n, obj, []',
      'Array.from [], ->\n  console.log(this)\n  z (x) => console.log(x, this)\n, obj',
      'foo.every ->\n  console.log(this)\n  z((x) => console.log(x, this))\n, obj',
      'foo.filter(->\n  console.log(this)\n  z((x) => console.log(x, this))\n, obj)',
      'foo.find(->\n  console.log(this)\n  z (x) => console.log(x, this)\n, obj)',
      'foo.findIndex(->\n  console.log(this)\n  z((x) => console.log(x, this))\n, obj)',
      'foo.forEach(->\n  console.log(this)\n  z (x) => console.log(x, this)\n, obj)',
      'foo.map(->\n  console.log(this)\n  z (x) => console.log(x, this)\n, obj)',
      'foo.some(->\n  console.log(this)\n  z (x) => console.log(x, this)\n, obj)',
      // Class Instance Methods.
      'class A\n  foo: ->\n    console.log(this)\n    z (x) => console.log(x, this)',
      // Bind/Call/Apply
      'foo = (->\n  console.log(this)\n  z (x) =>\n    console.log(x, this)\n).bind obj',
      'foo = (->\n  console.log(this)\n  z (x) =>\n    console.log(x, this)\n).call obj',
      'foo = (->\n  console.log(this)\n  z (x) =>\n    console.log(x, this)\n).apply obj',
      // Class Static methods.
      'class A\n  @foo: ->\n    console.log this\n    z (x) => console.log(x, this)',
      // Constructors.
      'Foo = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'class A\n  constructor: ({@b} = {}) ->\n    console.log(@)\n    z (x) => console.log(x, @)',
      // On a property.
      'obj =\n  foo: ->\n    console.log(this)\n    z (x) => console.log(x, this)',
      'obj =\n  foo: foo or ->\n    console.log this\n    z (x) => console.log(x, this)',
      'foo = (Ctor = ->\n  console.log(this)\n  z (x) => console.log(x, this)\n) ->',
      '[\n  obj.method = ->\n    console.log(this)\n    z((x) => console.log(x, this))\n] = a',
      'Ctor = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      'foo(### @this Obj ### ->\n  console.log(this)\n  z (x) => console.log(x, this)\n)',
      // https://github.com/eslint/eslint/issues/3287
      'foo = ->\n  ###* @this Obj### return ->\n    console.log(this)\n    z (x) => console.log(x, this)',
      // https://github.com/eslint/eslint/issues/6824
      'Ctor = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      // https://github.com/eslint/eslint/issues/6824
      'Ctor = (@b) ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      // @this tag.
      '###* @this Obj ### foo = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
      '###*\n# @returns {void}\n# @this Obj\n###\nfoo = ->\n  console.log this\n  z (x) => console.log(x, this)',
      {
        code: '(@a) => @bcd',
        options: [
          {
            fatArrowsOk: true
          }
        ]
      }
    ],
    invalid: [
      {
        code: '[\n  func = ->\n    console.log @\n    z (x) -> console.log x, @\n] = a',
        errors
      },
      {
        // https://github.com/eslint/eslint/issues/3254
        code: 'foo = ->\n  console.log(this)\n  z((x) => console.log(x, this))',
        errors
      },
      {
        // Global.
        code: 'console.log(this)\nz (x) => console.log(x, this)',
        errors
      },
      {
        // IIFE.
        code: 'do ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        // Just functions.
        code: 'foo = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo = ->\n  "use strict"\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'return ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo = (->\n  console.log(this)\n  z (x) => console.log(x, this)\n).bar obj',
        errors
      },
      {
        // Functions in methods.
        code: 'obj =\n  foo: ->\n    foo = ->\n      console.log(this)\n      z (x) => console.log(x, this)\n    foo()',
        errors
      },
      {
        code: 'obj =\n  foo: ->\n    ->\n      console.log(this)\n      z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'obj =\n  foo: ->\n    "use strict"\n    ->\n      console.log this\n      z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'obj.foo = ->\n  ->\n    console.log(this)\n    z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'obj.foo = ->\n  "use strict"\n  return ->\n    console.log(this)\n    z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'class A\n  foo: -> ->\n    console.log(this)\n    z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'obj.foo = do ->\n  =>\n    console.log(this)\n    z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'obj.foo = do => =>\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo = (->\n  console.log(this)\n  z (x) => console.log(x, this)\n).bind(null)',
        errors
      },
      {
        code: '(->\n  console.log(this)\n  z (x) => console.log(x, this)\n).call(undefined)',
        errors
      },
      {
        // Array methods.
        code: 'Array.from [], ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.every ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.filter ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.find ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.findIndex ->\n  console.log this\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.forEach ->\nconsole.log this\nz (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.map ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.some ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo.forEach ->\n  console.log(this)\n  z (x) => console.log(x, this)\n, null',
        errors
      },
      {
        code: '###* @returns {void} ### ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: '###* @this Obj ### foo ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'func = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'func = ->\n  console.log(this)\n  z (x) => console.log(x, this)',
        errors
      },
      {
        code: 'foo = (func = ->\n  console.log(this)\n  z (x) => console.log(x, this)\n) ->',
        errors
      },
      {
        code: '(@b) ->\n  z (x) => console.log(x, this)',
        errors
      }
    ]
  });

}).call(this);
