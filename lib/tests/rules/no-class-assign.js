// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Tests for no-class-assign rule.
   * @author Toru Nagashima
   */
  'use strict';
  var RuleTester, rule, ruleTester;

  //------------------------------------------------------------------------------
  // Requirements
  //------------------------------------------------------------------------------
  rule = require('eslint/lib/rules/no-class-assign');

  ({RuleTester} = require('eslint'));

  //------------------------------------------------------------------------------
  // Tests
  //------------------------------------------------------------------------------
  ruleTester = new RuleTester({
    parser: '../../..'
  });

  ruleTester.run('no-class-assign', rule, {
    valid: [
      'class A\nfoo A',
      'A = class A\nfoo A',
      'class A\n  b: (A) -> A = 0',
      // ignores non class.
      'x = 0\nx = 1',
      'x = ->\nx = 1',
      'foo = (x) -> x = 1',
      'try\ncatch x\n  x = 1'
    ],
    invalid: [
      {
        code: 'class A\nA = 0',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'class A\n{A} = 0',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'class A\n{b: A = 0} = {}',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'A = 0\nclass A',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'class A\n  b: -> A = 0',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'A = class A\n  b: -> A = 0',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier'
          }
        ]
      },
      {
        code: 'class A\nA = 0\nA = 1',
        errors: [
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier',
            line: 2,
            column: 1
          },
          {
            messageId: 'class',
            data: {
              name: 'A'
            },
            type: 'Identifier',
            line: 3,
            column: 1
          }
        ]
      }
    ]
  });

}).call(this);
