// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Common utils for AST.
   * @author Gyandeep Singh
   */
  'use strict';
  var anyLoopPattern, astUtils, getFunctionName, getPrecedence, isInLoop, isLoop;

  astUtils = require('eslint/lib/ast-utils');

  anyLoopPattern = /^WhileStatement|For$/;

  //------------------------------------------------------------------------------
  // Public Interface
  //------------------------------------------------------------------------------
  /**
   * Get the precedence level based on the node type
   * @param {ASTNode} node node to evaluate
   * @returns {int} precedence level
   * @private
   */
  getPrecedence = function(node) {
    switch (node.type) {
      // when 'SequenceExpression'
      //   return 0
      case 'AssignmentExpression': // ,'ArrowFunctionExpression', 'YieldExpression'
        return 1;
      // when 'ConditionalExpression'
      //   return 3
      case 'LogicalExpression':
        switch (node.operator) {
          case '?':
            return 3;
          case '||':
          case 'or':
            return 4;
          case '&&':
          case 'and':
            return 5;
        }
        break;
      // no default
      /* falls through */
      case 'BinaryExpression':
        switch (node.operator) {
          case '|':
            return 6;
          case '^':
            return 7;
          case '&':
            return 8;
          case '==':
          case '!=':
          case '===':
          case '!==':
            return 9;
          case '<':
          case '<=':
          case '>':
          case '>=':
          case 'in':
          case 'instanceof':
            return 10;
          case '<<':
          case '>>':
          case '>>>':
            return 11;
          case '+':
          case '-':
            return 12;
          case '*':
          case '/':
          case '%':
            return 13;
          case '**':
            return 15;
        }
    }
  };

  // no default
  /* falls through */
  // when 'UnaryExpression', 'AwaitExpression'
  //   return 16
  // when 'UpdateExpression'
  //   return 17
  // when 'CallExpression'
  //   return 18
  // when 'NewExpression'
  //   return 19
  // else
  //   return 20
  isLoop = function(node) {
    return !!(node && anyLoopPattern.test(node.type));
  };

  isInLoop = function(node) {
    var currentNode;
    currentNode = node;
    while (currentNode && !astUtils.isFunction(currentNode)) {
      if (isLoop(currentNode)) {
        return true;
      }
      currentNode = currentNode.parent;
    }
    return false;
  };

  getFunctionName = function(node) {
    if (!((node != null ? node.type : void 0) === 'FunctionExpression' && node.parent.type === 'AssignmentExpression' && node.parent.left.type === 'Identifier')) {
      return null;
    }
    return node.parent.left.name;
  };

  module.exports = {getPrecedence, isInLoop, getFunctionName};

}).call(this);
