// Generated by CoffeeScript 2.3.1
(function() {
  /**
   * @fileoverview Rule to flag the use of empty character classes in regular expressions
   * @author Ian Christian Myers
   */
  'use strict';
  var justContentRegex, regex;

  //------------------------------------------------------------------------------
  // Helpers
  //------------------------------------------------------------------------------
  /*
   * plain-English description of the following regexp:
   * 0. `^` fix the match at the beginning of the string
   * 1. `\/`: the `/` that begins the regexp
   * 2. `([^\\[]|\\.|\[([^\\\]]|\\.)+\])*`: regexp contents; 0 or more of the following
   * 2.0. `[^\\[]`: any character that's not a `\` or a `[` (anything but escape sequences and character classes)
   * 2.1. `\\.`: an escape sequence
   * 2.2. `\[([^\\\]]|\\.)+\]`: a character class that isn't empty
   * 3. `\/` the `/` that ends the regexp
   * 4. `[gimuy]*`: optional regexp flags
   * 5. `$`: fix the match at the end of the string
   */
  regex = /^\/([^\\[]|\\.|\[([^\\\]]|\\.)+\])*\/[gimuys]*$/;

  justContentRegex = /^([^\\[]|\\.|\[([^\\\]]|\\.)+\])*$/;

  //------------------------------------------------------------------------------
  // Rule Definition
  //------------------------------------------------------------------------------
  module.exports = {
    meta: {
      docs: {
        description: 'disallow empty character classes in regular expressions',
        category: 'Possible Errors',
        recommended: true,
        url: 'https://eslint.org/docs/rules/no-empty-character-class'
      },
      schema: [],
      messages: {
        unexpected: 'Empty class.'
      }
    },
    create: function(context) {
      var sourceCode;
      sourceCode = context.getSourceCode();
      return {
        Literal: function(node) {
          var token;
          token = sourceCode.getFirstToken(node);
          if (token.type !== 'RegularExpression') {
            return;
          }
          if (!regex.test(node.raw)) {
            return context.report({
              node,
              messageId: 'unexpected'
            });
          }
        },
        TemplateElement: function(node) {
          var ref, ref1;
          if (!((node.pattern != null) && ((ref = node.parent) != null ? (ref1 = ref.parent) != null ? ref1.type : void 0 : void 0) === 'InterpolatedRegExpLiteral')) {
            return;
          }
          if (!justContentRegex.test(node.pattern)) {
            return context.report({
              node: node.parent.parent,
              messageId: 'unexpected'
            });
          }
        }
      };
    }
  };

}).call(this);
