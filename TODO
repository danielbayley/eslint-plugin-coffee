- code path analysis needs to actually understand for when, since it considers anything after a for when whose body returns to be unreachable? or is eslint-plugin-known-imports using outdated?

- figure out how to not commit lib/ and publish to npm
- restrict eslint peerDependency range or detect version - looks like eg ast-utils has moved to lib/util/ast-utils
- should we always be parsing as module?
- expose prettier/prettier w/ prettier-plugin-coffeescript config set up eg as plugin:coffee/prettier? and disable conflicting rules
- add test like eslint-plugin-react (?) that checks that everything in src/rules/ is exposed and has tests
  and that everything in usable has tests
- comprehensively go through expected token types and include in espreeTokenTypes
- include tests from coffeelint?
- didn't include tests for first couple rules
- add excludeLoop option to no-constant-condition?
- documentation
- code path analysis for optional call/member expressions?
- push id-length fixes upstream to eslint?
- add exceptNullInitializers option to no-multi-assign?
- no-useless-escape should flag unnecessary escapes in heredocs/heregexes (delimiters)
- get added to docs Configuring list of compatible parsers
- no-unused-vars doesn't understand do (x) -> as a usage of outer x
  - does no-loop-func understand do (x) -> ?
- no-extra-bind doesn't check if bind expression it's removing could have side effects
- should no-overwrite sameScope: no be able to allow "parallel" assignments eg
  if yes
    a = 1
  else
    a = 2
- should probably use explicit whitelist of compatible rules (so that new unknown ESLint rules don't blindly get run)
- require-unicode-regexp uses eslint-utils' getStringIfConstant(), would be cool if it could recognize "const" assignments
- add more keywords to quote-props (eg unless)?
- eslint-env comments don't work because eslint is searching explicitly for /* eslint-env ... */
- the // -> # at the beginning of the file (to counteract ESLint transforming #! -> //) would break code that actually starts with a heregex
- code path chokes on empty try eg
  try
    # comment
  b
- seems like lines-around-comment would benefit from memoizing getParentNodeOfToken()
- expose eg prettier-conflict config that just turns off rules that conflict with prettier (without turning on prettier/prettier)?
- upstream: looks like the node.type is 'BlockStatement' check in implicit-arrow-linebreak should be node.body.type is 'BlockStatement'
- should eslint-plugin-react be a dependency?
- no-useless-escape is flagging ///^(#{pragma}\.)?#{createClass}$/// (I guess because it gets exposed as a new RegExp call? should it escape differently in the AST? or should the rule handle that case differently?)
- should no-unused-vars allow/have an option for eg key in for key, val of b ...?
- looks like the version of babel-eslint doesn't understand fragments so doesn't eg transform children JSXText of fragments into Literal (worked around in jsx-no-comment-textnodes by also checking JSXText, which some other existing tests seem to do - is that for a similar reason (ie support older version of babel-eslint)?)
- attributions in files originally from other projects?
- yoda shouldn't yell at you if you're doing chained comparison eg 1 < x < 7

rule ideas:
- prefer-implicit-return
- prefer-unless (how does this relate to no-negated-condition? Should no-negated-condition check even if there isn't an else?)
- comprehension-parens (somewhat like coffeelint ensure_comprehensions, but maybe have options for assignment (eg a = b for b in c), inlineFunction (eg a = -> b for b in c))?
- no-negated-not-relation eg not (a not in b) should just be a in b
- prefer-not-relation eg not (a in b) should be a not in b
- normalized heredoc spacing (eg initial/final linebreaks, indentation level wrt whatever (ending quotes?))
- prefer-at-param
- no-top-level-indent
- spread-direction
- no-unnecessary-function-wrapper eg (foo) -> f foo could just be f (though we ran into some weirdness around this)
- implicit-call-parens
- implicit-object-braces
- prefer-do
